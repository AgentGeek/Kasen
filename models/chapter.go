// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Chapter is an object representing the database table.
type Chapter struct {
	ID          int64             `boil:"id" json:"id" toml:"id" yaml:"id"`
	Locked      null.Bool         `boil:"locked" json:"locked,omitempty" toml:"locked" yaml:"locked,omitempty"`
	CreatedAt   time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	PublishedAt null.Time         `boil:"published_at" json:"published_at,omitempty" toml:"published_at" yaml:"published_at,omitempty"`
	ProjectID   int64             `boil:"project_id" json:"project_id" toml:"project_id" yaml:"project_id"`
	UploaderID  null.Int64        `boil:"uploader_id" json:"uploader_id,omitempty" toml:"uploader_id" yaml:"uploader_id,omitempty"`
	Chapter     string            `boil:"chapter" json:"chapter" toml:"chapter" yaml:"chapter"`
	Volume      null.String       `boil:"volume" json:"volume,omitempty" toml:"volume" yaml:"volume,omitempty"`
	Title       null.String       `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Pages       types.StringArray `boil:"pages" json:"pages,omitempty" toml:"pages" yaml:"pages,omitempty"`

	R *chapterR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L chapterL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChapterColumns = struct {
	ID          string
	Locked      string
	CreatedAt   string
	UpdatedAt   string
	PublishedAt string
	ProjectID   string
	UploaderID  string
	Chapter     string
	Volume      string
	Title       string
	Pages       string
}{
	ID:          "id",
	Locked:      "locked",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	PublishedAt: "published_at",
	ProjectID:   "project_id",
	UploaderID:  "uploader_id",
	Chapter:     "chapter",
	Volume:      "volume",
	Title:       "title",
	Pages:       "pages",
}

var ChapterTableColumns = struct {
	ID          string
	Locked      string
	CreatedAt   string
	UpdatedAt   string
	PublishedAt string
	ProjectID   string
	UploaderID  string
	Chapter     string
	Volume      string
	Title       string
	Pages       string
}{
	ID:          "chapter.id",
	Locked:      "chapter.locked",
	CreatedAt:   "chapter.created_at",
	UpdatedAt:   "chapter.updated_at",
	PublishedAt: "chapter.published_at",
	ProjectID:   "chapter.project_id",
	UploaderID:  "chapter.uploader_id",
	Chapter:     "chapter.chapter",
	Volume:      "chapter.volume",
	Title:       "chapter.title",
	Pages:       "chapter.pages",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_StringArray) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_StringArray) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var ChapterWhere = struct {
	ID          whereHelperint64
	Locked      whereHelpernull_Bool
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	PublishedAt whereHelpernull_Time
	ProjectID   whereHelperint64
	UploaderID  whereHelpernull_Int64
	Chapter     whereHelperstring
	Volume      whereHelpernull_String
	Title       whereHelpernull_String
	Pages       whereHelpertypes_StringArray
}{
	ID:          whereHelperint64{field: "\"chapter\".\"id\""},
	Locked:      whereHelpernull_Bool{field: "\"chapter\".\"locked\""},
	CreatedAt:   whereHelpertime_Time{field: "\"chapter\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"chapter\".\"updated_at\""},
	PublishedAt: whereHelpernull_Time{field: "\"chapter\".\"published_at\""},
	ProjectID:   whereHelperint64{field: "\"chapter\".\"project_id\""},
	UploaderID:  whereHelpernull_Int64{field: "\"chapter\".\"uploader_id\""},
	Chapter:     whereHelperstring{field: "\"chapter\".\"chapter\""},
	Volume:      whereHelpernull_String{field: "\"chapter\".\"volume\""},
	Title:       whereHelpernull_String{field: "\"chapter\".\"title\""},
	Pages:       whereHelpertypes_StringArray{field: "\"chapter\".\"pages\""},
}

// ChapterRels is where relationship names are stored.
var ChapterRels = struct {
	Project          string
	Uploader         string
	Statistic        string
	ScanlationGroups string
}{
	Project:          "Project",
	Uploader:         "Uploader",
	Statistic:        "Statistic",
	ScanlationGroups: "ScanlationGroups",
}

// chapterR is where relationships are stored.
type chapterR struct {
	Project          *Project             `boil:"Project" json:"Project" toml:"Project" yaml:"Project"`
	Uploader         *User                `boil:"Uploader" json:"Uploader" toml:"Uploader" yaml:"Uploader"`
	Statistic        *Statistic           `boil:"Statistic" json:"Statistic" toml:"Statistic" yaml:"Statistic"`
	ScanlationGroups ScanlationGroupSlice `boil:"ScanlationGroups" json:"ScanlationGroups" toml:"ScanlationGroups" yaml:"ScanlationGroups"`
}

// NewStruct creates a new relationship struct
func (*chapterR) NewStruct() *chapterR {
	return &chapterR{}
}

// chapterL is where Load methods for each relationship are stored.
type chapterL struct{}

var (
	chapterAllColumns            = []string{"id", "locked", "created_at", "updated_at", "published_at", "project_id", "uploader_id", "chapter", "volume", "title", "pages"}
	chapterColumnsWithoutDefault = []string{"published_at", "project_id", "uploader_id"}
	chapterColumnsWithDefault    = []string{"id", "locked", "created_at", "updated_at", "chapter", "volume", "title", "pages"}
	chapterPrimaryKeyColumns     = []string{"id"}
)

type (
	// ChapterSlice is an alias for a slice of pointers to Chapter.
	// This should almost always be used instead of []Chapter.
	ChapterSlice []*Chapter
	// ChapterHook is the signature for custom Chapter hook methods
	ChapterHook func(boil.Executor, *Chapter) error

	chapterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chapterType                 = reflect.TypeOf(&Chapter{})
	chapterMapping              = queries.MakeStructMapping(chapterType)
	chapterPrimaryKeyMapping, _ = queries.BindMapping(chapterType, chapterMapping, chapterPrimaryKeyColumns)
	chapterInsertCacheMut       sync.RWMutex
	chapterInsertCache          = make(map[string]insertCache)
	chapterUpdateCacheMut       sync.RWMutex
	chapterUpdateCache          = make(map[string]updateCache)
	chapterUpsertCacheMut       sync.RWMutex
	chapterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var chapterBeforeInsertHooks []ChapterHook
var chapterBeforeUpdateHooks []ChapterHook
var chapterBeforeDeleteHooks []ChapterHook
var chapterBeforeUpsertHooks []ChapterHook

var chapterAfterInsertHooks []ChapterHook
var chapterAfterSelectHooks []ChapterHook
var chapterAfterUpdateHooks []ChapterHook
var chapterAfterDeleteHooks []ChapterHook
var chapterAfterUpsertHooks []ChapterHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Chapter) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chapterBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Chapter) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range chapterBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Chapter) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range chapterBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Chapter) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chapterBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Chapter) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chapterAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Chapter) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range chapterAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Chapter) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range chapterAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Chapter) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range chapterAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Chapter) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chapterAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChapterHook registers your hook function for all future operations.
func AddChapterHook(hookPoint boil.HookPoint, chapterHook ChapterHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		chapterBeforeInsertHooks = append(chapterBeforeInsertHooks, chapterHook)
	case boil.BeforeUpdateHook:
		chapterBeforeUpdateHooks = append(chapterBeforeUpdateHooks, chapterHook)
	case boil.BeforeDeleteHook:
		chapterBeforeDeleteHooks = append(chapterBeforeDeleteHooks, chapterHook)
	case boil.BeforeUpsertHook:
		chapterBeforeUpsertHooks = append(chapterBeforeUpsertHooks, chapterHook)
	case boil.AfterInsertHook:
		chapterAfterInsertHooks = append(chapterAfterInsertHooks, chapterHook)
	case boil.AfterSelectHook:
		chapterAfterSelectHooks = append(chapterAfterSelectHooks, chapterHook)
	case boil.AfterUpdateHook:
		chapterAfterUpdateHooks = append(chapterAfterUpdateHooks, chapterHook)
	case boil.AfterDeleteHook:
		chapterAfterDeleteHooks = append(chapterAfterDeleteHooks, chapterHook)
	case boil.AfterUpsertHook:
		chapterAfterUpsertHooks = append(chapterAfterUpsertHooks, chapterHook)
	}
}

// One returns a single chapter record from the query.
func (q chapterQuery) One(exec boil.Executor) (*Chapter, error) {
	o := &Chapter{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for chapter")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Chapter records from the query.
func (q chapterQuery) All(exec boil.Executor) (ChapterSlice, error) {
	var o []*Chapter

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Chapter slice")
	}

	if len(chapterAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Chapter records in the query.
func (q chapterQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count chapter rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q chapterQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if chapter exists")
	}

	return count > 0, nil
}

// Project pointed to by the foreign key.
func (o *Chapter) Project(mods ...qm.QueryMod) projectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProjectID),
	}

	queryMods = append(queryMods, mods...)

	query := Projects(queryMods...)
	queries.SetFrom(query.Query, "\"project\"")

	return query
}

// Uploader pointed to by the foreign key.
func (o *Chapter) Uploader(mods ...qm.QueryMod) userAccountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UploaderID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"user_account\"")

	return query
}

// Statistic pointed to by the foreign key.
func (o *Chapter) Statistic(mods ...qm.QueryMod) statisticQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"chapter_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := Statistics(queryMods...)
	queries.SetFrom(query.Query, "\"statistics\"")

	return query
}

// ScanlationGroups retrieves all the scanlation_group's ScanlationGroups with an executor.
func (o *Chapter) ScanlationGroups(mods ...qm.QueryMod) scanlationGroupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"chapter_scanlation_groups\" on \"scanlation_group\".\"id\" = \"chapter_scanlation_groups\".\"scanlation_group_id\""),
		qm.Where("\"chapter_scanlation_groups\".\"chapter_id\"=?", o.ID),
	)

	query := ScanlationGroups(queryMods...)
	queries.SetFrom(query.Query, "\"scanlation_group\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"scanlation_group\".*"})
	}

	return query
}

// LoadProject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chapterL) LoadProject(e boil.Executor, singular bool, maybeChapter interface{}, mods queries.Applicator) error {
	var slice []*Chapter
	var object *Chapter

	if singular {
		object = maybeChapter.(*Chapter)
	} else {
		slice = *maybeChapter.(*[]*Chapter)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chapterR{}
		}
		args = append(args, object.ProjectID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chapterR{}
			}

			for _, a := range args {
				if a == obj.ProjectID {
					continue Outer
				}
			}

			args = append(args, obj.ProjectID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`project`),
		qm.WhereIn(`project.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Project")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Project")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for project")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for project")
	}

	if len(chapterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Project = foreign
		if foreign.R == nil {
			foreign.R = &projectR{}
		}
		foreign.R.Chapters = append(foreign.R.Chapters, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProjectID == foreign.ID {
				local.R.Project = foreign
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.Chapters = append(foreign.R.Chapters, local)
				break
			}
		}
	}

	return nil
}

// LoadUploader allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chapterL) LoadUploader(e boil.Executor, singular bool, maybeChapter interface{}, mods queries.Applicator) error {
	var slice []*Chapter
	var object *Chapter

	if singular {
		object = maybeChapter.(*Chapter)
	} else {
		slice = *maybeChapter.(*[]*Chapter)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chapterR{}
		}
		if !queries.IsNil(object.UploaderID) {
			args = append(args, object.UploaderID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chapterR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UploaderID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UploaderID) {
				args = append(args, obj.UploaderID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_account`),
		qm.WhereIn(`user_account.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_account")
	}

	if len(chapterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Uploader = foreign
		if foreign.R == nil {
			foreign.R = &userAccountR{}
		}
		foreign.R.Chapters = append(foreign.R.Chapters, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UploaderID, foreign.ID) {
				local.R.Uploader = foreign
				if foreign.R == nil {
					foreign.R = &userAccountR{}
				}
				foreign.R.Chapters = append(foreign.R.Chapters, local)
				break
			}
		}
	}

	return nil
}

// LoadStatistic allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (chapterL) LoadStatistic(e boil.Executor, singular bool, maybeChapter interface{}, mods queries.Applicator) error {
	var slice []*Chapter
	var object *Chapter

	if singular {
		object = maybeChapter.(*Chapter)
	} else {
		slice = *maybeChapter.(*[]*Chapter)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chapterR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chapterR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`statistics`),
		qm.WhereIn(`statistics.chapter_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Statistic")
	}

	var resultSlice []*Statistic
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Statistic")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for statistics")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for statistics")
	}

	if len(chapterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Statistic = foreign
		if foreign.R == nil {
			foreign.R = &statisticR{}
		}
		foreign.R.Chapter = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.ChapterID) {
				local.R.Statistic = foreign
				if foreign.R == nil {
					foreign.R = &statisticR{}
				}
				foreign.R.Chapter = local
				break
			}
		}
	}

	return nil
}

// LoadScanlationGroups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chapterL) LoadScanlationGroups(e boil.Executor, singular bool, maybeChapter interface{}, mods queries.Applicator) error {
	var slice []*Chapter
	var object *Chapter

	if singular {
		object = maybeChapter.(*Chapter)
	} else {
		slice = *maybeChapter.(*[]*Chapter)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chapterR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chapterR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"scanlation_group\".id, \"scanlation_group\".slug, \"scanlation_group\".name, \"a\".\"chapter_id\""),
		qm.From("\"scanlation_group\""),
		qm.InnerJoin("\"chapter_scanlation_groups\" as \"a\" on \"scanlation_group\".\"id\" = \"a\".\"scanlation_group_id\""),
		qm.WhereIn("\"a\".\"chapter_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load scanlation_group")
	}

	var resultSlice []*ScanlationGroup

	var localJoinCols []int64
	for results.Next() {
		one := new(ScanlationGroup)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.Slug, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for scanlation_group")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice scanlation_group")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on scanlation_group")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for scanlation_group")
	}

	if len(scanlationGroupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ScanlationGroups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &scanlationGroupR{}
			}
			foreign.R.Chapters = append(foreign.R.Chapters, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.ScanlationGroups = append(local.R.ScanlationGroups, foreign)
				if foreign.R == nil {
					foreign.R = &scanlationGroupR{}
				}
				foreign.R.Chapters = append(foreign.R.Chapters, local)
				break
			}
		}
	}

	return nil
}

// SetProject of the chapter to the related item.
// Sets o.R.Project to related.
// Adds o to related.R.Chapters.
func (o *Chapter) SetProject(exec boil.Executor, insert bool, related *Project) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chapter\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"project_id"}),
		strmangle.WhereClause("\"", "\"", 2, chapterPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProjectID = related.ID
	if o.R == nil {
		o.R = &chapterR{
			Project: related,
		}
	} else {
		o.R.Project = related
	}

	if related.R == nil {
		related.R = &projectR{
			Chapters: ChapterSlice{o},
		}
	} else {
		related.R.Chapters = append(related.R.Chapters, o)
	}

	return nil
}

// SetUploader of the chapter to the related item.
// Sets o.R.Uploader to related.
// Adds o to related.R.Chapters.
func (o *Chapter) SetUploader(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chapter\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"uploader_id"}),
		strmangle.WhereClause("\"", "\"", 2, chapterPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UploaderID, related.ID)
	if o.R == nil {
		o.R = &chapterR{
			Uploader: related,
		}
	} else {
		o.R.Uploader = related
	}

	if related.R == nil {
		related.R = &userAccountR{
			Chapters: ChapterSlice{o},
		}
	} else {
		related.R.Chapters = append(related.R.Chapters, o)
	}

	return nil
}

// RemoveUploader relationship.
// Sets o.R.Uploader to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Chapter) RemoveUploader(exec boil.Executor, related *User) error {
	var err error

	queries.SetScanner(&o.UploaderID, nil)
	if err = o.Update(exec, boil.Whitelist("uploader_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Uploader = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Chapters {
		if queries.Equal(o.UploaderID, ri.UploaderID) {
			continue
		}

		ln := len(related.R.Chapters)
		if ln > 1 && i < ln-1 {
			related.R.Chapters[i] = related.R.Chapters[ln-1]
		}
		related.R.Chapters = related.R.Chapters[:ln-1]
		break
	}
	return nil
}

// SetStatistic of the chapter to the related item.
// Sets o.R.Statistic to related.
// Adds o to related.R.Chapter.
func (o *Chapter) SetStatistic(exec boil.Executor, insert bool, related *Statistic) error {
	var err error

	if insert {
		queries.Assign(&related.ChapterID, o.ID)

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"statistics\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"chapter_id"}),
			strmangle.WhereClause("\"", "\"", 2, statisticPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.ChapterID, o.ID)
	}

	if o.R == nil {
		o.R = &chapterR{
			Statistic: related,
		}
	} else {
		o.R.Statistic = related
	}

	if related.R == nil {
		related.R = &statisticR{
			Chapter: o,
		}
	} else {
		related.R.Chapter = o
	}
	return nil
}

// RemoveStatistic relationship.
// Sets o.R.Statistic to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Chapter) RemoveStatistic(exec boil.Executor, related *Statistic) error {
	var err error

	queries.SetScanner(&related.ChapterID, nil)
	if err = related.Update(exec, boil.Whitelist("chapter_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Statistic = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.Chapter = nil
	return nil
}

// AddScanlationGroups adds the given related objects to the existing relationships
// of the chapter, optionally inserting them as new records.
// Appends related to o.R.ScanlationGroups.
// Sets related.R.Chapters appropriately.
func (o *Chapter) AddScanlationGroups(exec boil.Executor, insert bool, related ...*ScanlationGroup) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"chapter_scanlation_groups\" (\"chapter_id\", \"scanlation_group_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &chapterR{
			ScanlationGroups: related,
		}
	} else {
		o.R.ScanlationGroups = append(o.R.ScanlationGroups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &scanlationGroupR{
				Chapters: ChapterSlice{o},
			}
		} else {
			rel.R.Chapters = append(rel.R.Chapters, o)
		}
	}
	return nil
}

// SetScanlationGroups removes all previously related items of the
// chapter replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Chapters's ScanlationGroups accordingly.
// Replaces o.R.ScanlationGroups with related.
// Sets related.R.Chapters's ScanlationGroups accordingly.
func (o *Chapter) SetScanlationGroups(exec boil.Executor, insert bool, related ...*ScanlationGroup) error {
	query := "delete from \"chapter_scanlation_groups\" where \"chapter_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeScanlationGroupsFromChaptersSlice(o, related)
	if o.R != nil {
		o.R.ScanlationGroups = nil
	}
	return o.AddScanlationGroups(exec, insert, related...)
}

// RemoveScanlationGroups relationships from objects passed in.
// Removes related items from R.ScanlationGroups (uses pointer comparison, removal does not keep order)
// Sets related.R.Chapters.
func (o *Chapter) RemoveScanlationGroups(exec boil.Executor, related ...*ScanlationGroup) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"chapter_scanlation_groups\" where \"chapter_id\" = $1 and \"scanlation_group_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeScanlationGroupsFromChaptersSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ScanlationGroups {
			if rel != ri {
				continue
			}

			ln := len(o.R.ScanlationGroups)
			if ln > 1 && i < ln-1 {
				o.R.ScanlationGroups[i] = o.R.ScanlationGroups[ln-1]
			}
			o.R.ScanlationGroups = o.R.ScanlationGroups[:ln-1]
			break
		}
	}

	return nil
}

func removeScanlationGroupsFromChaptersSlice(o *Chapter, related []*ScanlationGroup) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Chapters {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Chapters)
			if ln > 1 && i < ln-1 {
				rel.R.Chapters[i] = rel.R.Chapters[ln-1]
			}
			rel.R.Chapters = rel.R.Chapters[:ln-1]
			break
		}
	}
}

// Chapters retrieves all the records using an executor.
func Chapters(mods ...qm.QueryMod) chapterQuery {
	mods = append(mods, qm.From("\"chapter\""))
	return chapterQuery{NewQuery(mods...)}
}

// FindChapter retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChapter(exec boil.Executor, iD int64, selectCols ...string) (*Chapter, error) {
	chapterObj := &Chapter{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"chapter\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, chapterObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from chapter")
	}

	if err = chapterObj.doAfterSelectHooks(exec); err != nil {
		return chapterObj, err
	}

	return chapterObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Chapter) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no chapter provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chapterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chapterInsertCacheMut.RLock()
	cache, cached := chapterInsertCache[key]
	chapterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chapterAllColumns,
			chapterColumnsWithDefault,
			chapterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(chapterType, chapterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chapterType, chapterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"chapter\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"chapter\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into chapter")
	}

	if !cached {
		chapterInsertCacheMut.Lock()
		chapterInsertCache[key] = cache
		chapterInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Chapter.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Chapter) Update(exec boil.Executor, columns boil.Columns) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(columns, nil)
	chapterUpdateCacheMut.RLock()
	cache, cached := chapterUpdateCache[key]
	chapterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chapterAllColumns,
			chapterPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update chapter, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"chapter\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, chapterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chapterType, chapterMapping, append(wl, chapterPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update chapter row")
	}

	if !cached {
		chapterUpdateCacheMut.Lock()
		chapterUpdateCache[key] = cache
		chapterUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q chapterQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for chapter")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChapterSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chapterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"chapter\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, chapterPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in chapter slice")
	}

	return nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Chapter) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no chapter provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chapterColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chapterUpsertCacheMut.RLock()
	cache, cached := chapterUpsertCache[key]
	chapterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			chapterAllColumns,
			chapterColumnsWithDefault,
			chapterColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			chapterAllColumns,
			chapterPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert chapter, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(chapterPrimaryKeyColumns))
			copy(conflict, chapterPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"chapter\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(chapterType, chapterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chapterType, chapterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert chapter")
	}

	if !cached {
		chapterUpsertCacheMut.Lock()
		chapterUpsertCache[key] = cache
		chapterUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Chapter record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Chapter) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Chapter provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chapterPrimaryKeyMapping)
	sql := "DELETE FROM \"chapter\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from chapter")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q chapterQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("models: no chapterQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from chapter")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChapterSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	if len(chapterBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chapterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"chapter\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chapterPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from chapter slice")
	}

	if len(chapterAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Chapter) Reload(exec boil.Executor) error {
	ret, err := FindChapter(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChapterSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChapterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chapterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"chapter\".* FROM \"chapter\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chapterPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ChapterSlice")
	}

	*o = slice

	return nil
}

// ChapterExists checks if the Chapter row exists.
func ChapterExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"chapter\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if chapter exists")
	}

	return exists, nil
}
