// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Statistic is an object representing the database table.
type Statistic struct {
	ID              int64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProjectID       null.Int64 `boil:"project_id" json:"project_id,omitempty" toml:"project_id" yaml:"project_id,omitempty"`
	ChapterID       null.Int64 `boil:"chapter_id" json:"chapter_id,omitempty" toml:"chapter_id" yaml:"chapter_id,omitempty"`
	ViewCount       int64      `boil:"view_count" json:"view_count" toml:"view_count" yaml:"view_count"`
	UniqueViewCount int64      `boil:"unique_view_count" json:"unique_view_count" toml:"unique_view_count" yaml:"unique_view_count"`

	R *statisticR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L statisticL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StatisticColumns = struct {
	ID              string
	ProjectID       string
	ChapterID       string
	ViewCount       string
	UniqueViewCount string
}{
	ID:              "id",
	ProjectID:       "project_id",
	ChapterID:       "chapter_id",
	ViewCount:       "view_count",
	UniqueViewCount: "unique_view_count",
}

var StatisticTableColumns = struct {
	ID              string
	ProjectID       string
	ChapterID       string
	ViewCount       string
	UniqueViewCount string
}{
	ID:              "statistics.id",
	ProjectID:       "statistics.project_id",
	ChapterID:       "statistics.chapter_id",
	ViewCount:       "statistics.view_count",
	UniqueViewCount: "statistics.unique_view_count",
}

// Generated where

var StatisticWhere = struct {
	ID              whereHelperint64
	ProjectID       whereHelpernull_Int64
	ChapterID       whereHelpernull_Int64
	ViewCount       whereHelperint64
	UniqueViewCount whereHelperint64
}{
	ID:              whereHelperint64{field: "\"statistics\".\"id\""},
	ProjectID:       whereHelpernull_Int64{field: "\"statistics\".\"project_id\""},
	ChapterID:       whereHelpernull_Int64{field: "\"statistics\".\"chapter_id\""},
	ViewCount:       whereHelperint64{field: "\"statistics\".\"view_count\""},
	UniqueViewCount: whereHelperint64{field: "\"statistics\".\"unique_view_count\""},
}

// StatisticRels is where relationship names are stored.
var StatisticRels = struct {
	Chapter string
	Project string
}{
	Chapter: "Chapter",
	Project: "Project",
}

// statisticR is where relationships are stored.
type statisticR struct {
	Chapter *Chapter `boil:"Chapter" json:"Chapter" toml:"Chapter" yaml:"Chapter"`
	Project *Project `boil:"Project" json:"Project" toml:"Project" yaml:"Project"`
}

// NewStruct creates a new relationship struct
func (*statisticR) NewStruct() *statisticR {
	return &statisticR{}
}

// statisticL is where Load methods for each relationship are stored.
type statisticL struct{}

var (
	statisticAllColumns            = []string{"id", "project_id", "chapter_id", "view_count", "unique_view_count"}
	statisticColumnsWithoutDefault = []string{"project_id", "chapter_id"}
	statisticColumnsWithDefault    = []string{"id", "view_count", "unique_view_count"}
	statisticPrimaryKeyColumns     = []string{"id"}
)

type (
	// StatisticSlice is an alias for a slice of pointers to Statistic.
	// This should almost always be used instead of []Statistic.
	StatisticSlice []*Statistic
	// StatisticHook is the signature for custom Statistic hook methods
	StatisticHook func(boil.Executor, *Statistic) error

	statisticQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	statisticType                 = reflect.TypeOf(&Statistic{})
	statisticMapping              = queries.MakeStructMapping(statisticType)
	statisticPrimaryKeyMapping, _ = queries.BindMapping(statisticType, statisticMapping, statisticPrimaryKeyColumns)
	statisticInsertCacheMut       sync.RWMutex
	statisticInsertCache          = make(map[string]insertCache)
	statisticUpdateCacheMut       sync.RWMutex
	statisticUpdateCache          = make(map[string]updateCache)
	statisticUpsertCacheMut       sync.RWMutex
	statisticUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var statisticBeforeInsertHooks []StatisticHook
var statisticBeforeUpdateHooks []StatisticHook
var statisticBeforeDeleteHooks []StatisticHook
var statisticBeforeUpsertHooks []StatisticHook

var statisticAfterInsertHooks []StatisticHook
var statisticAfterSelectHooks []StatisticHook
var statisticAfterUpdateHooks []StatisticHook
var statisticAfterDeleteHooks []StatisticHook
var statisticAfterUpsertHooks []StatisticHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Statistic) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range statisticBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Statistic) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range statisticBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Statistic) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range statisticBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Statistic) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range statisticBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Statistic) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range statisticAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Statistic) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range statisticAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Statistic) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range statisticAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Statistic) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range statisticAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Statistic) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range statisticAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStatisticHook registers your hook function for all future operations.
func AddStatisticHook(hookPoint boil.HookPoint, statisticHook StatisticHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		statisticBeforeInsertHooks = append(statisticBeforeInsertHooks, statisticHook)
	case boil.BeforeUpdateHook:
		statisticBeforeUpdateHooks = append(statisticBeforeUpdateHooks, statisticHook)
	case boil.BeforeDeleteHook:
		statisticBeforeDeleteHooks = append(statisticBeforeDeleteHooks, statisticHook)
	case boil.BeforeUpsertHook:
		statisticBeforeUpsertHooks = append(statisticBeforeUpsertHooks, statisticHook)
	case boil.AfterInsertHook:
		statisticAfterInsertHooks = append(statisticAfterInsertHooks, statisticHook)
	case boil.AfterSelectHook:
		statisticAfterSelectHooks = append(statisticAfterSelectHooks, statisticHook)
	case boil.AfterUpdateHook:
		statisticAfterUpdateHooks = append(statisticAfterUpdateHooks, statisticHook)
	case boil.AfterDeleteHook:
		statisticAfterDeleteHooks = append(statisticAfterDeleteHooks, statisticHook)
	case boil.AfterUpsertHook:
		statisticAfterUpsertHooks = append(statisticAfterUpsertHooks, statisticHook)
	}
}

// One returns a single statistic record from the query.
func (q statisticQuery) One(exec boil.Executor) (*Statistic, error) {
	o := &Statistic{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for statistics")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Statistic records from the query.
func (q statisticQuery) All(exec boil.Executor) (StatisticSlice, error) {
	var o []*Statistic

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Statistic slice")
	}

	if len(statisticAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Statistic records in the query.
func (q statisticQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count statistics rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q statisticQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if statistics exists")
	}

	return count > 0, nil
}

// Chapter pointed to by the foreign key.
func (o *Statistic) Chapter(mods ...qm.QueryMod) chapterQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChapterID),
	}

	queryMods = append(queryMods, mods...)

	query := Chapters(queryMods...)
	queries.SetFrom(query.Query, "\"chapter\"")

	return query
}

// Project pointed to by the foreign key.
func (o *Statistic) Project(mods ...qm.QueryMod) projectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProjectID),
	}

	queryMods = append(queryMods, mods...)

	query := Projects(queryMods...)
	queries.SetFrom(query.Query, "\"project\"")

	return query
}

// LoadChapter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (statisticL) LoadChapter(e boil.Executor, singular bool, maybeStatistic interface{}, mods queries.Applicator) error {
	var slice []*Statistic
	var object *Statistic

	if singular {
		object = maybeStatistic.(*Statistic)
	} else {
		slice = *maybeStatistic.(*[]*Statistic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &statisticR{}
		}
		if !queries.IsNil(object.ChapterID) {
			args = append(args, object.ChapterID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &statisticR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ChapterID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ChapterID) {
				args = append(args, obj.ChapterID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chapter`),
		qm.WhereIn(`chapter.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Chapter")
	}

	var resultSlice []*Chapter
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Chapter")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for chapter")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chapter")
	}

	if len(statisticAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Chapter = foreign
		if foreign.R == nil {
			foreign.R = &chapterR{}
		}
		foreign.R.Statistic = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ChapterID, foreign.ID) {
				local.R.Chapter = foreign
				if foreign.R == nil {
					foreign.R = &chapterR{}
				}
				foreign.R.Statistic = local
				break
			}
		}
	}

	return nil
}

// LoadProject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (statisticL) LoadProject(e boil.Executor, singular bool, maybeStatistic interface{}, mods queries.Applicator) error {
	var slice []*Statistic
	var object *Statistic

	if singular {
		object = maybeStatistic.(*Statistic)
	} else {
		slice = *maybeStatistic.(*[]*Statistic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &statisticR{}
		}
		if !queries.IsNil(object.ProjectID) {
			args = append(args, object.ProjectID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &statisticR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProjectID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProjectID) {
				args = append(args, obj.ProjectID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`project`),
		qm.WhereIn(`project.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Project")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Project")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for project")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for project")
	}

	if len(statisticAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Project = foreign
		if foreign.R == nil {
			foreign.R = &projectR{}
		}
		foreign.R.Statistic = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProjectID, foreign.ID) {
				local.R.Project = foreign
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.Statistic = local
				break
			}
		}
	}

	return nil
}

// SetChapter of the statistic to the related item.
// Sets o.R.Chapter to related.
// Adds o to related.R.Statistic.
func (o *Statistic) SetChapter(exec boil.Executor, insert bool, related *Chapter) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"statistics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"chapter_id"}),
		strmangle.WhereClause("\"", "\"", 2, statisticPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ChapterID, related.ID)
	if o.R == nil {
		o.R = &statisticR{
			Chapter: related,
		}
	} else {
		o.R.Chapter = related
	}

	if related.R == nil {
		related.R = &chapterR{
			Statistic: o,
		}
	} else {
		related.R.Statistic = o
	}

	return nil
}

// RemoveChapter relationship.
// Sets o.R.Chapter to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Statistic) RemoveChapter(exec boil.Executor, related *Chapter) error {
	var err error

	queries.SetScanner(&o.ChapterID, nil)
	if err = o.Update(exec, boil.Whitelist("chapter_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Chapter = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.Statistic = nil
	return nil
}

// SetProject of the statistic to the related item.
// Sets o.R.Project to related.
// Adds o to related.R.Statistic.
func (o *Statistic) SetProject(exec boil.Executor, insert bool, related *Project) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"statistics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"project_id"}),
		strmangle.WhereClause("\"", "\"", 2, statisticPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProjectID, related.ID)
	if o.R == nil {
		o.R = &statisticR{
			Project: related,
		}
	} else {
		o.R.Project = related
	}

	if related.R == nil {
		related.R = &projectR{
			Statistic: o,
		}
	} else {
		related.R.Statistic = o
	}

	return nil
}

// RemoveProject relationship.
// Sets o.R.Project to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Statistic) RemoveProject(exec boil.Executor, related *Project) error {
	var err error

	queries.SetScanner(&o.ProjectID, nil)
	if err = o.Update(exec, boil.Whitelist("project_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Project = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.Statistic = nil
	return nil
}

// Statistics retrieves all the records using an executor.
func Statistics(mods ...qm.QueryMod) statisticQuery {
	mods = append(mods, qm.From("\"statistics\""))
	return statisticQuery{NewQuery(mods...)}
}

// FindStatistic retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStatistic(exec boil.Executor, iD int64, selectCols ...string) (*Statistic, error) {
	statisticObj := &Statistic{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"statistics\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, statisticObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from statistics")
	}

	if err = statisticObj.doAfterSelectHooks(exec); err != nil {
		return statisticObj, err
	}

	return statisticObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Statistic) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no statistics provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(statisticColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	statisticInsertCacheMut.RLock()
	cache, cached := statisticInsertCache[key]
	statisticInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			statisticAllColumns,
			statisticColumnsWithDefault,
			statisticColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(statisticType, statisticMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(statisticType, statisticMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"statistics\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"statistics\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into statistics")
	}

	if !cached {
		statisticInsertCacheMut.Lock()
		statisticInsertCache[key] = cache
		statisticInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Statistic.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Statistic) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(columns, nil)
	statisticUpdateCacheMut.RLock()
	cache, cached := statisticUpdateCache[key]
	statisticUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			statisticAllColumns,
			statisticPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update statistics, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"statistics\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, statisticPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(statisticType, statisticMapping, append(wl, statisticPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update statistics row")
	}

	if !cached {
		statisticUpdateCacheMut.Lock()
		statisticUpdateCache[key] = cache
		statisticUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q statisticQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for statistics")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StatisticSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statisticPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"statistics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, statisticPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in statistic slice")
	}

	return nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Statistic) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no statistics provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(statisticColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	statisticUpsertCacheMut.RLock()
	cache, cached := statisticUpsertCache[key]
	statisticUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			statisticAllColumns,
			statisticColumnsWithDefault,
			statisticColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			statisticAllColumns,
			statisticPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert statistics, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(statisticPrimaryKeyColumns))
			copy(conflict, statisticPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"statistics\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(statisticType, statisticMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(statisticType, statisticMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert statistics")
	}

	if !cached {
		statisticUpsertCacheMut.Lock()
		statisticUpsertCache[key] = cache
		statisticUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Statistic record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Statistic) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Statistic provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), statisticPrimaryKeyMapping)
	sql := "DELETE FROM \"statistics\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from statistics")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q statisticQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("models: no statisticQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from statistics")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StatisticSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	if len(statisticBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statisticPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"statistics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, statisticPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from statistic slice")
	}

	if len(statisticAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Statistic) Reload(exec boil.Executor) error {
	ret, err := FindStatistic(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StatisticSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StatisticSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statisticPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"statistics\".* FROM \"statistics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, statisticPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StatisticSlice")
	}

	*o = slice

	return nil
}

// StatisticExists checks if the Statistic row exists.
func StatisticExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"statistics\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if statistics exists")
	}

	return exists, nil
}
