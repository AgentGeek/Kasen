// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Cover is an object representing the database table.
type Cover struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	ProjectID int64     `boil:"project_id" json:"project_id" toml:"project_id" yaml:"project_id"`
	FileName  string    `boil:"file_name" json:"file_name" toml:"file_name" yaml:"file_name"`

	R *coverR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L coverL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CoverColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	ProjectID string
	FileName  string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	ProjectID: "project_id",
	FileName:  "file_name",
}

var CoverTableColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	ProjectID string
	FileName  string
}{
	ID:        "cover.id",
	CreatedAt: "cover.created_at",
	UpdatedAt: "cover.updated_at",
	ProjectID: "cover.project_id",
	FileName:  "cover.file_name",
}

// Generated where

var CoverWhere = struct {
	ID        whereHelperint64
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	ProjectID whereHelperint64
	FileName  whereHelperstring
}{
	ID:        whereHelperint64{field: "\"cover\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"cover\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"cover\".\"updated_at\""},
	ProjectID: whereHelperint64{field: "\"cover\".\"project_id\""},
	FileName:  whereHelperstring{field: "\"cover\".\"file_name\""},
}

// CoverRels is where relationship names are stored.
var CoverRels = struct {
	Project  string
	Projects string
}{
	Project:  "Project",
	Projects: "Projects",
}

// coverR is where relationships are stored.
type coverR struct {
	Project  *Project     `boil:"Project" json:"Project" toml:"Project" yaml:"Project"`
	Projects ProjectSlice `boil:"Projects" json:"Projects" toml:"Projects" yaml:"Projects"`
}

// NewStruct creates a new relationship struct
func (*coverR) NewStruct() *coverR {
	return &coverR{}
}

// coverL is where Load methods for each relationship are stored.
type coverL struct{}

var (
	coverAllColumns            = []string{"id", "created_at", "updated_at", "project_id", "file_name"}
	coverColumnsWithoutDefault = []string{"project_id"}
	coverColumnsWithDefault    = []string{"id", "created_at", "updated_at", "file_name"}
	coverPrimaryKeyColumns     = []string{"id"}
)

type (
	// CoverSlice is an alias for a slice of pointers to Cover.
	// This should almost always be used instead of []Cover.
	CoverSlice []*Cover
	// CoverHook is the signature for custom Cover hook methods
	CoverHook func(boil.Executor, *Cover) error

	coverQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	coverType                 = reflect.TypeOf(&Cover{})
	coverMapping              = queries.MakeStructMapping(coverType)
	coverPrimaryKeyMapping, _ = queries.BindMapping(coverType, coverMapping, coverPrimaryKeyColumns)
	coverInsertCacheMut       sync.RWMutex
	coverInsertCache          = make(map[string]insertCache)
	coverUpdateCacheMut       sync.RWMutex
	coverUpdateCache          = make(map[string]updateCache)
	coverUpsertCacheMut       sync.RWMutex
	coverUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var coverBeforeInsertHooks []CoverHook
var coverBeforeUpdateHooks []CoverHook
var coverBeforeDeleteHooks []CoverHook
var coverBeforeUpsertHooks []CoverHook

var coverAfterInsertHooks []CoverHook
var coverAfterSelectHooks []CoverHook
var coverAfterUpdateHooks []CoverHook
var coverAfterDeleteHooks []CoverHook
var coverAfterUpsertHooks []CoverHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Cover) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range coverBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Cover) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range coverBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Cover) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range coverBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Cover) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range coverBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Cover) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range coverAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Cover) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range coverAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Cover) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range coverAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Cover) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range coverAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Cover) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range coverAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCoverHook registers your hook function for all future operations.
func AddCoverHook(hookPoint boil.HookPoint, coverHook CoverHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		coverBeforeInsertHooks = append(coverBeforeInsertHooks, coverHook)
	case boil.BeforeUpdateHook:
		coverBeforeUpdateHooks = append(coverBeforeUpdateHooks, coverHook)
	case boil.BeforeDeleteHook:
		coverBeforeDeleteHooks = append(coverBeforeDeleteHooks, coverHook)
	case boil.BeforeUpsertHook:
		coverBeforeUpsertHooks = append(coverBeforeUpsertHooks, coverHook)
	case boil.AfterInsertHook:
		coverAfterInsertHooks = append(coverAfterInsertHooks, coverHook)
	case boil.AfterSelectHook:
		coverAfterSelectHooks = append(coverAfterSelectHooks, coverHook)
	case boil.AfterUpdateHook:
		coverAfterUpdateHooks = append(coverAfterUpdateHooks, coverHook)
	case boil.AfterDeleteHook:
		coverAfterDeleteHooks = append(coverAfterDeleteHooks, coverHook)
	case boil.AfterUpsertHook:
		coverAfterUpsertHooks = append(coverAfterUpsertHooks, coverHook)
	}
}

// One returns a single cover record from the query.
func (q coverQuery) One(exec boil.Executor) (*Cover, error) {
	o := &Cover{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cover")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Cover records from the query.
func (q coverQuery) All(exec boil.Executor) (CoverSlice, error) {
	var o []*Cover

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Cover slice")
	}

	if len(coverAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Cover records in the query.
func (q coverQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cover rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q coverQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cover exists")
	}

	return count > 0, nil
}

// Project pointed to by the foreign key.
func (o *Cover) Project(mods ...qm.QueryMod) projectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProjectID),
	}

	queryMods = append(queryMods, mods...)

	query := Projects(queryMods...)
	queries.SetFrom(query.Query, "\"project\"")

	return query
}

// Projects retrieves all the project's Projects with an executor.
func (o *Cover) Projects(mods ...qm.QueryMod) projectQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"project\".\"cover_id\"=?", o.ID),
	)

	query := Projects(queryMods...)
	queries.SetFrom(query.Query, "\"project\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"project\".*"})
	}

	return query
}

// LoadProject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (coverL) LoadProject(e boil.Executor, singular bool, maybeCover interface{}, mods queries.Applicator) error {
	var slice []*Cover
	var object *Cover

	if singular {
		object = maybeCover.(*Cover)
	} else {
		slice = *maybeCover.(*[]*Cover)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &coverR{}
		}
		args = append(args, object.ProjectID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &coverR{}
			}

			for _, a := range args {
				if a == obj.ProjectID {
					continue Outer
				}
			}

			args = append(args, obj.ProjectID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`project`),
		qm.WhereIn(`project.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Project")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Project")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for project")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for project")
	}

	if len(coverAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Project = foreign
		if foreign.R == nil {
			foreign.R = &projectR{}
		}
		foreign.R.Covers = append(foreign.R.Covers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProjectID == foreign.ID {
				local.R.Project = foreign
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.Covers = append(foreign.R.Covers, local)
				break
			}
		}
	}

	return nil
}

// LoadProjects allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (coverL) LoadProjects(e boil.Executor, singular bool, maybeCover interface{}, mods queries.Applicator) error {
	var slice []*Cover
	var object *Cover

	if singular {
		object = maybeCover.(*Cover)
	} else {
		slice = *maybeCover.(*[]*Cover)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &coverR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &coverR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`project`),
		qm.WhereIn(`project.cover_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load project")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice project")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on project")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for project")
	}

	if len(projectAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Projects = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &projectR{}
			}
			foreign.R.Cover = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CoverID) {
				local.R.Projects = append(local.R.Projects, foreign)
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.Cover = local
				break
			}
		}
	}

	return nil
}

// SetProject of the cover to the related item.
// Sets o.R.Project to related.
// Adds o to related.R.Covers.
func (o *Cover) SetProject(exec boil.Executor, insert bool, related *Project) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"cover\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"project_id"}),
		strmangle.WhereClause("\"", "\"", 2, coverPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProjectID = related.ID
	if o.R == nil {
		o.R = &coverR{
			Project: related,
		}
	} else {
		o.R.Project = related
	}

	if related.R == nil {
		related.R = &projectR{
			Covers: CoverSlice{o},
		}
	} else {
		related.R.Covers = append(related.R.Covers, o)
	}

	return nil
}

// AddProjects adds the given related objects to the existing relationships
// of the cover, optionally inserting them as new records.
// Appends related to o.R.Projects.
// Sets related.R.Cover appropriately.
func (o *Cover) AddProjects(exec boil.Executor, insert bool, related ...*Project) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CoverID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"project\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"cover_id"}),
				strmangle.WhereClause("\"", "\"", 2, projectPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CoverID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &coverR{
			Projects: related,
		}
	} else {
		o.R.Projects = append(o.R.Projects, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &projectR{
				Cover: o,
			}
		} else {
			rel.R.Cover = o
		}
	}
	return nil
}

// SetProjects removes all previously related items of the
// cover replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Cover's Projects accordingly.
// Replaces o.R.Projects with related.
// Sets related.R.Cover's Projects accordingly.
func (o *Cover) SetProjects(exec boil.Executor, insert bool, related ...*Project) error {
	query := "update \"project\" set \"cover_id\" = null where \"cover_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Projects {
			queries.SetScanner(&rel.CoverID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Cover = nil
		}

		o.R.Projects = nil
	}
	return o.AddProjects(exec, insert, related...)
}

// RemoveProjects relationships from objects passed in.
// Removes related items from R.Projects (uses pointer comparison, removal does not keep order)
// Sets related.R.Cover.
func (o *Cover) RemoveProjects(exec boil.Executor, related ...*Project) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CoverID, nil)
		if rel.R != nil {
			rel.R.Cover = nil
		}
		if err = rel.Update(exec, boil.Whitelist("cover_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Projects {
			if rel != ri {
				continue
			}

			ln := len(o.R.Projects)
			if ln > 1 && i < ln-1 {
				o.R.Projects[i] = o.R.Projects[ln-1]
			}
			o.R.Projects = o.R.Projects[:ln-1]
			break
		}
	}

	return nil
}

// Covers retrieves all the records using an executor.
func Covers(mods ...qm.QueryMod) coverQuery {
	mods = append(mods, qm.From("\"cover\""))
	return coverQuery{NewQuery(mods...)}
}

// FindCover retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCover(exec boil.Executor, iD int64, selectCols ...string) (*Cover, error) {
	coverObj := &Cover{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cover\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, coverObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cover")
	}

	if err = coverObj.doAfterSelectHooks(exec); err != nil {
		return coverObj, err
	}

	return coverObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Cover) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cover provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(coverColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	coverInsertCacheMut.RLock()
	cache, cached := coverInsertCache[key]
	coverInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			coverAllColumns,
			coverColumnsWithDefault,
			coverColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(coverType, coverMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(coverType, coverMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cover\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cover\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cover")
	}

	if !cached {
		coverInsertCacheMut.Lock()
		coverInsertCache[key] = cache
		coverInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Cover.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Cover) Update(exec boil.Executor, columns boil.Columns) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(columns, nil)
	coverUpdateCacheMut.RLock()
	cache, cached := coverUpdateCache[key]
	coverUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			coverAllColumns,
			coverPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update cover, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cover\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, coverPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(coverType, coverMapping, append(wl, coverPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update cover row")
	}

	if !cached {
		coverUpdateCacheMut.Lock()
		coverUpdateCache[key] = cache
		coverUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q coverQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for cover")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CoverSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), coverPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cover\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, coverPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in cover slice")
	}

	return nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Cover) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cover provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(coverColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	coverUpsertCacheMut.RLock()
	cache, cached := coverUpsertCache[key]
	coverUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			coverAllColumns,
			coverColumnsWithDefault,
			coverColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			coverAllColumns,
			coverPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert cover, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(coverPrimaryKeyColumns))
			copy(conflict, coverPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cover\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(coverType, coverMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(coverType, coverMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert cover")
	}

	if !cached {
		coverUpsertCacheMut.Lock()
		coverUpsertCache[key] = cache
		coverUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Cover record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Cover) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Cover provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), coverPrimaryKeyMapping)
	sql := "DELETE FROM \"cover\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from cover")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q coverQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("models: no coverQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from cover")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CoverSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	if len(coverBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), coverPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cover\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, coverPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from cover slice")
	}

	if len(coverAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Cover) Reload(exec boil.Executor) error {
	ret, err := FindCover(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CoverSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CoverSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), coverPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cover\".* FROM \"cover\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, coverPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CoverSlice")
	}

	*o = slice

	return nil
}

// CoverExists checks if the Cover row exists.
func CoverExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cover\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cover exists")
	}

	return exists, nil
}
