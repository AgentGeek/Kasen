// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ScanlationGroup is an object representing the database table.
type ScanlationGroup struct {
	ID   int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	Slug string `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *scanlationGroupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L scanlationGroupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ScanlationGroupColumns = struct {
	ID   string
	Slug string
	Name string
}{
	ID:   "id",
	Slug: "slug",
	Name: "name",
}

var ScanlationGroupTableColumns = struct {
	ID   string
	Slug string
	Name string
}{
	ID:   "scanlation_group.id",
	Slug: "scanlation_group.slug",
	Name: "scanlation_group.name",
}

// Generated where

var ScanlationGroupWhere = struct {
	ID   whereHelperint64
	Slug whereHelperstring
	Name whereHelperstring
}{
	ID:   whereHelperint64{field: "\"scanlation_group\".\"id\""},
	Slug: whereHelperstring{field: "\"scanlation_group\".\"slug\""},
	Name: whereHelperstring{field: "\"scanlation_group\".\"name\""},
}

// ScanlationGroupRels is where relationship names are stored.
var ScanlationGroupRels = struct {
	Chapters string
}{
	Chapters: "Chapters",
}

// scanlationGroupR is where relationships are stored.
type scanlationGroupR struct {
	Chapters ChapterSlice `boil:"Chapters" json:"Chapters" toml:"Chapters" yaml:"Chapters"`
}

// NewStruct creates a new relationship struct
func (*scanlationGroupR) NewStruct() *scanlationGroupR {
	return &scanlationGroupR{}
}

// scanlationGroupL is where Load methods for each relationship are stored.
type scanlationGroupL struct{}

var (
	scanlationGroupAllColumns            = []string{"id", "slug", "name"}
	scanlationGroupColumnsWithoutDefault = []string{}
	scanlationGroupColumnsWithDefault    = []string{"id", "slug", "name"}
	scanlationGroupPrimaryKeyColumns     = []string{"id"}
)

type (
	// ScanlationGroupSlice is an alias for a slice of pointers to ScanlationGroup.
	// This should almost always be used instead of []ScanlationGroup.
	ScanlationGroupSlice []*ScanlationGroup
	// ScanlationGroupHook is the signature for custom ScanlationGroup hook methods
	ScanlationGroupHook func(boil.Executor, *ScanlationGroup) error

	scanlationGroupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	scanlationGroupType                 = reflect.TypeOf(&ScanlationGroup{})
	scanlationGroupMapping              = queries.MakeStructMapping(scanlationGroupType)
	scanlationGroupPrimaryKeyMapping, _ = queries.BindMapping(scanlationGroupType, scanlationGroupMapping, scanlationGroupPrimaryKeyColumns)
	scanlationGroupInsertCacheMut       sync.RWMutex
	scanlationGroupInsertCache          = make(map[string]insertCache)
	scanlationGroupUpdateCacheMut       sync.RWMutex
	scanlationGroupUpdateCache          = make(map[string]updateCache)
	scanlationGroupUpsertCacheMut       sync.RWMutex
	scanlationGroupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var scanlationGroupBeforeInsertHooks []ScanlationGroupHook
var scanlationGroupBeforeUpdateHooks []ScanlationGroupHook
var scanlationGroupBeforeDeleteHooks []ScanlationGroupHook
var scanlationGroupBeforeUpsertHooks []ScanlationGroupHook

var scanlationGroupAfterInsertHooks []ScanlationGroupHook
var scanlationGroupAfterSelectHooks []ScanlationGroupHook
var scanlationGroupAfterUpdateHooks []ScanlationGroupHook
var scanlationGroupAfterDeleteHooks []ScanlationGroupHook
var scanlationGroupAfterUpsertHooks []ScanlationGroupHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ScanlationGroup) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range scanlationGroupBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ScanlationGroup) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range scanlationGroupBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ScanlationGroup) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range scanlationGroupBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ScanlationGroup) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range scanlationGroupBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ScanlationGroup) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range scanlationGroupAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ScanlationGroup) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range scanlationGroupAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ScanlationGroup) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range scanlationGroupAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ScanlationGroup) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range scanlationGroupAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ScanlationGroup) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range scanlationGroupAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddScanlationGroupHook registers your hook function for all future operations.
func AddScanlationGroupHook(hookPoint boil.HookPoint, scanlationGroupHook ScanlationGroupHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		scanlationGroupBeforeInsertHooks = append(scanlationGroupBeforeInsertHooks, scanlationGroupHook)
	case boil.BeforeUpdateHook:
		scanlationGroupBeforeUpdateHooks = append(scanlationGroupBeforeUpdateHooks, scanlationGroupHook)
	case boil.BeforeDeleteHook:
		scanlationGroupBeforeDeleteHooks = append(scanlationGroupBeforeDeleteHooks, scanlationGroupHook)
	case boil.BeforeUpsertHook:
		scanlationGroupBeforeUpsertHooks = append(scanlationGroupBeforeUpsertHooks, scanlationGroupHook)
	case boil.AfterInsertHook:
		scanlationGroupAfterInsertHooks = append(scanlationGroupAfterInsertHooks, scanlationGroupHook)
	case boil.AfterSelectHook:
		scanlationGroupAfterSelectHooks = append(scanlationGroupAfterSelectHooks, scanlationGroupHook)
	case boil.AfterUpdateHook:
		scanlationGroupAfterUpdateHooks = append(scanlationGroupAfterUpdateHooks, scanlationGroupHook)
	case boil.AfterDeleteHook:
		scanlationGroupAfterDeleteHooks = append(scanlationGroupAfterDeleteHooks, scanlationGroupHook)
	case boil.AfterUpsertHook:
		scanlationGroupAfterUpsertHooks = append(scanlationGroupAfterUpsertHooks, scanlationGroupHook)
	}
}

// One returns a single scanlationGroup record from the query.
func (q scanlationGroupQuery) One(exec boil.Executor) (*ScanlationGroup, error) {
	o := &ScanlationGroup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for scanlation_group")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ScanlationGroup records from the query.
func (q scanlationGroupQuery) All(exec boil.Executor) (ScanlationGroupSlice, error) {
	var o []*ScanlationGroup

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ScanlationGroup slice")
	}

	if len(scanlationGroupAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ScanlationGroup records in the query.
func (q scanlationGroupQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count scanlation_group rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q scanlationGroupQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if scanlation_group exists")
	}

	return count > 0, nil
}

// Chapters retrieves all the chapter's Chapters with an executor.
func (o *ScanlationGroup) Chapters(mods ...qm.QueryMod) chapterQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"chapter_scanlation_groups\" on \"chapter\".\"id\" = \"chapter_scanlation_groups\".\"chapter_id\""),
		qm.Where("\"chapter_scanlation_groups\".\"scanlation_group_id\"=?", o.ID),
	)

	query := Chapters(queryMods...)
	queries.SetFrom(query.Query, "\"chapter\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"chapter\".*"})
	}

	return query
}

// LoadChapters allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (scanlationGroupL) LoadChapters(e boil.Executor, singular bool, maybeScanlationGroup interface{}, mods queries.Applicator) error {
	var slice []*ScanlationGroup
	var object *ScanlationGroup

	if singular {
		object = maybeScanlationGroup.(*ScanlationGroup)
	} else {
		slice = *maybeScanlationGroup.(*[]*ScanlationGroup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &scanlationGroupR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &scanlationGroupR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"chapter\".id, \"chapter\".locked, \"chapter\".created_at, \"chapter\".updated_at, \"chapter\".published_at, \"chapter\".project_id, \"chapter\".uploader_id, \"chapter\".chapter, \"chapter\".volume, \"chapter\".title, \"chapter\".pages, \"a\".\"scanlation_group_id\""),
		qm.From("\"chapter\""),
		qm.InnerJoin("\"chapter_scanlation_groups\" as \"a\" on \"chapter\".\"id\" = \"a\".\"chapter_id\""),
		qm.WhereIn("\"a\".\"scanlation_group_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chapter")
	}

	var resultSlice []*Chapter

	var localJoinCols []int64
	for results.Next() {
		one := new(Chapter)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.Locked, &one.CreatedAt, &one.UpdatedAt, &one.PublishedAt, &one.ProjectID, &one.UploaderID, &one.Chapter, &one.Volume, &one.Title, &one.Pages, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for chapter")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice chapter")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chapter")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chapter")
	}

	if len(chapterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Chapters = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chapterR{}
			}
			foreign.R.ScanlationGroups = append(foreign.R.ScanlationGroups, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Chapters = append(local.R.Chapters, foreign)
				if foreign.R == nil {
					foreign.R = &chapterR{}
				}
				foreign.R.ScanlationGroups = append(foreign.R.ScanlationGroups, local)
				break
			}
		}
	}

	return nil
}

// AddChapters adds the given related objects to the existing relationships
// of the scanlation_group, optionally inserting them as new records.
// Appends related to o.R.Chapters.
// Sets related.R.ScanlationGroups appropriately.
func (o *ScanlationGroup) AddChapters(exec boil.Executor, insert bool, related ...*Chapter) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"chapter_scanlation_groups\" (\"scanlation_group_id\", \"chapter_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &scanlationGroupR{
			Chapters: related,
		}
	} else {
		o.R.Chapters = append(o.R.Chapters, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chapterR{
				ScanlationGroups: ScanlationGroupSlice{o},
			}
		} else {
			rel.R.ScanlationGroups = append(rel.R.ScanlationGroups, o)
		}
	}
	return nil
}

// SetChapters removes all previously related items of the
// scanlation_group replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ScanlationGroups's Chapters accordingly.
// Replaces o.R.Chapters with related.
// Sets related.R.ScanlationGroups's Chapters accordingly.
func (o *ScanlationGroup) SetChapters(exec boil.Executor, insert bool, related ...*Chapter) error {
	query := "delete from \"chapter_scanlation_groups\" where \"scanlation_group_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeChaptersFromScanlationGroupsSlice(o, related)
	if o.R != nil {
		o.R.Chapters = nil
	}
	return o.AddChapters(exec, insert, related...)
}

// RemoveChapters relationships from objects passed in.
// Removes related items from R.Chapters (uses pointer comparison, removal does not keep order)
// Sets related.R.ScanlationGroups.
func (o *ScanlationGroup) RemoveChapters(exec boil.Executor, related ...*Chapter) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"chapter_scanlation_groups\" where \"scanlation_group_id\" = $1 and \"chapter_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeChaptersFromScanlationGroupsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Chapters {
			if rel != ri {
				continue
			}

			ln := len(o.R.Chapters)
			if ln > 1 && i < ln-1 {
				o.R.Chapters[i] = o.R.Chapters[ln-1]
			}
			o.R.Chapters = o.R.Chapters[:ln-1]
			break
		}
	}

	return nil
}

func removeChaptersFromScanlationGroupsSlice(o *ScanlationGroup, related []*Chapter) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.ScanlationGroups {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.ScanlationGroups)
			if ln > 1 && i < ln-1 {
				rel.R.ScanlationGroups[i] = rel.R.ScanlationGroups[ln-1]
			}
			rel.R.ScanlationGroups = rel.R.ScanlationGroups[:ln-1]
			break
		}
	}
}

// ScanlationGroups retrieves all the records using an executor.
func ScanlationGroups(mods ...qm.QueryMod) scanlationGroupQuery {
	mods = append(mods, qm.From("\"scanlation_group\""))
	return scanlationGroupQuery{NewQuery(mods...)}
}

// FindScanlationGroup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindScanlationGroup(exec boil.Executor, iD int64, selectCols ...string) (*ScanlationGroup, error) {
	scanlationGroupObj := &ScanlationGroup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"scanlation_group\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, scanlationGroupObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from scanlation_group")
	}

	if err = scanlationGroupObj.doAfterSelectHooks(exec); err != nil {
		return scanlationGroupObj, err
	}

	return scanlationGroupObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ScanlationGroup) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no scanlation_group provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(scanlationGroupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	scanlationGroupInsertCacheMut.RLock()
	cache, cached := scanlationGroupInsertCache[key]
	scanlationGroupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			scanlationGroupAllColumns,
			scanlationGroupColumnsWithDefault,
			scanlationGroupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(scanlationGroupType, scanlationGroupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(scanlationGroupType, scanlationGroupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"scanlation_group\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"scanlation_group\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into scanlation_group")
	}

	if !cached {
		scanlationGroupInsertCacheMut.Lock()
		scanlationGroupInsertCache[key] = cache
		scanlationGroupInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the ScanlationGroup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ScanlationGroup) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(columns, nil)
	scanlationGroupUpdateCacheMut.RLock()
	cache, cached := scanlationGroupUpdateCache[key]
	scanlationGroupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			scanlationGroupAllColumns,
			scanlationGroupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update scanlation_group, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"scanlation_group\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, scanlationGroupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(scanlationGroupType, scanlationGroupMapping, append(wl, scanlationGroupPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update scanlation_group row")
	}

	if !cached {
		scanlationGroupUpdateCacheMut.Lock()
		scanlationGroupUpdateCache[key] = cache
		scanlationGroupUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q scanlationGroupQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for scanlation_group")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ScanlationGroupSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), scanlationGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"scanlation_group\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, scanlationGroupPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in scanlationGroup slice")
	}

	return nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ScanlationGroup) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no scanlation_group provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(scanlationGroupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	scanlationGroupUpsertCacheMut.RLock()
	cache, cached := scanlationGroupUpsertCache[key]
	scanlationGroupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			scanlationGroupAllColumns,
			scanlationGroupColumnsWithDefault,
			scanlationGroupColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			scanlationGroupAllColumns,
			scanlationGroupPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert scanlation_group, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(scanlationGroupPrimaryKeyColumns))
			copy(conflict, scanlationGroupPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"scanlation_group\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(scanlationGroupType, scanlationGroupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(scanlationGroupType, scanlationGroupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert scanlation_group")
	}

	if !cached {
		scanlationGroupUpsertCacheMut.Lock()
		scanlationGroupUpsertCache[key] = cache
		scanlationGroupUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single ScanlationGroup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ScanlationGroup) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no ScanlationGroup provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), scanlationGroupPrimaryKeyMapping)
	sql := "DELETE FROM \"scanlation_group\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from scanlation_group")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q scanlationGroupQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("models: no scanlationGroupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from scanlation_group")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ScanlationGroupSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	if len(scanlationGroupBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), scanlationGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"scanlation_group\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, scanlationGroupPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from scanlationGroup slice")
	}

	if len(scanlationGroupAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ScanlationGroup) Reload(exec boil.Executor) error {
	ret, err := FindScanlationGroup(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ScanlationGroupSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ScanlationGroupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), scanlationGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"scanlation_group\".* FROM \"scanlation_group\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, scanlationGroupPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ScanlationGroupSlice")
	}

	*o = slice

	return nil
}

// ScanlationGroupExists checks if the ScanlationGroup row exists.
func ScanlationGroupExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"scanlation_group\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if scanlation_group exists")
	}

	return exists, nil
}
