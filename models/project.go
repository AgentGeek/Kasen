// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Project is an object representing the database table.
type Project struct {
	ID            int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Slug          string      `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	Locked        null.Bool   `boil:"locked" json:"locked,omitempty" toml:"locked" yaml:"locked,omitempty"`
	CreatedAt     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	PublishedAt   null.Time   `boil:"published_at" json:"published_at,omitempty" toml:"published_at" yaml:"published_at,omitempty"`
	Title         string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	Description   null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	CoverID       null.Int64  `boil:"cover_id" json:"cover_id,omitempty" toml:"cover_id" yaml:"cover_id,omitempty"`
	ProjectStatus string      `boil:"project_status" json:"project_status" toml:"project_status" yaml:"project_status"`
	SeriesStatus  string      `boil:"series_status" json:"series_status" toml:"series_status" yaml:"series_status"`
	Demographic   null.String `boil:"demographic" json:"demographic,omitempty" toml:"demographic" yaml:"demographic,omitempty"`
	Rating        null.String `boil:"rating" json:"rating,omitempty" toml:"rating" yaml:"rating,omitempty"`

	R *projectR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L projectL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProjectColumns = struct {
	ID            string
	Slug          string
	Locked        string
	CreatedAt     string
	UpdatedAt     string
	PublishedAt   string
	Title         string
	Description   string
	CoverID       string
	ProjectStatus string
	SeriesStatus  string
	Demographic   string
	Rating        string
}{
	ID:            "id",
	Slug:          "slug",
	Locked:        "locked",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	PublishedAt:   "published_at",
	Title:         "title",
	Description:   "description",
	CoverID:       "cover_id",
	ProjectStatus: "project_status",
	SeriesStatus:  "series_status",
	Demographic:   "demographic",
	Rating:        "rating",
}

var ProjectTableColumns = struct {
	ID            string
	Slug          string
	Locked        string
	CreatedAt     string
	UpdatedAt     string
	PublishedAt   string
	Title         string
	Description   string
	CoverID       string
	ProjectStatus string
	SeriesStatus  string
	Demographic   string
	Rating        string
}{
	ID:            "project.id",
	Slug:          "project.slug",
	Locked:        "project.locked",
	CreatedAt:     "project.created_at",
	UpdatedAt:     "project.updated_at",
	PublishedAt:   "project.published_at",
	Title:         "project.title",
	Description:   "project.description",
	CoverID:       "project.cover_id",
	ProjectStatus: "project.project_status",
	SeriesStatus:  "project.series_status",
	Demographic:   "project.demographic",
	Rating:        "project.rating",
}

// Generated where

var ProjectWhere = struct {
	ID            whereHelperint64
	Slug          whereHelperstring
	Locked        whereHelpernull_Bool
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	PublishedAt   whereHelpernull_Time
	Title         whereHelperstring
	Description   whereHelpernull_String
	CoverID       whereHelpernull_Int64
	ProjectStatus whereHelperstring
	SeriesStatus  whereHelperstring
	Demographic   whereHelpernull_String
	Rating        whereHelpernull_String
}{
	ID:            whereHelperint64{field: "\"project\".\"id\""},
	Slug:          whereHelperstring{field: "\"project\".\"slug\""},
	Locked:        whereHelpernull_Bool{field: "\"project\".\"locked\""},
	CreatedAt:     whereHelpertime_Time{field: "\"project\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"project\".\"updated_at\""},
	PublishedAt:   whereHelpernull_Time{field: "\"project\".\"published_at\""},
	Title:         whereHelperstring{field: "\"project\".\"title\""},
	Description:   whereHelpernull_String{field: "\"project\".\"description\""},
	CoverID:       whereHelpernull_Int64{field: "\"project\".\"cover_id\""},
	ProjectStatus: whereHelperstring{field: "\"project\".\"project_status\""},
	SeriesStatus:  whereHelperstring{field: "\"project\".\"series_status\""},
	Demographic:   whereHelpernull_String{field: "\"project\".\"demographic\""},
	Rating:        whereHelpernull_String{field: "\"project\".\"rating\""},
}

// ProjectRels is where relationship names are stored.
var ProjectRels = struct {
	Cover     string
	Statistic string
	Chapters  string
	Covers    string
	Artists   string
	Authors   string
	Tags      string
}{
	Cover:     "Cover",
	Statistic: "Statistic",
	Chapters:  "Chapters",
	Covers:    "Covers",
	Artists:   "Artists",
	Authors:   "Authors",
	Tags:      "Tags",
}

// projectR is where relationships are stored.
type projectR struct {
	Cover     *Cover       `boil:"Cover" json:"Cover" toml:"Cover" yaml:"Cover"`
	Statistic *Statistic   `boil:"Statistic" json:"Statistic" toml:"Statistic" yaml:"Statistic"`
	Chapters  ChapterSlice `boil:"Chapters" json:"Chapters" toml:"Chapters" yaml:"Chapters"`
	Covers    CoverSlice   `boil:"Covers" json:"Covers" toml:"Covers" yaml:"Covers"`
	Artists   AuthorSlice  `boil:"Artists" json:"Artists" toml:"Artists" yaml:"Artists"`
	Authors   AuthorSlice  `boil:"Authors" json:"Authors" toml:"Authors" yaml:"Authors"`
	Tags      TagSlice     `boil:"Tags" json:"Tags" toml:"Tags" yaml:"Tags"`
}

// NewStruct creates a new relationship struct
func (*projectR) NewStruct() *projectR {
	return &projectR{}
}

// projectL is where Load methods for each relationship are stored.
type projectL struct{}

var (
	projectAllColumns            = []string{"id", "slug", "locked", "created_at", "updated_at", "published_at", "title", "description", "cover_id", "project_status", "series_status", "demographic", "rating"}
	projectColumnsWithoutDefault = []string{"published_at", "cover_id"}
	projectColumnsWithDefault    = []string{"id", "slug", "locked", "created_at", "updated_at", "title", "description", "project_status", "series_status", "demographic", "rating"}
	projectPrimaryKeyColumns     = []string{"id"}
)

type (
	// ProjectSlice is an alias for a slice of pointers to Project.
	// This should almost always be used instead of []Project.
	ProjectSlice []*Project
	// ProjectHook is the signature for custom Project hook methods
	ProjectHook func(boil.Executor, *Project) error

	projectQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	projectType                 = reflect.TypeOf(&Project{})
	projectMapping              = queries.MakeStructMapping(projectType)
	projectPrimaryKeyMapping, _ = queries.BindMapping(projectType, projectMapping, projectPrimaryKeyColumns)
	projectInsertCacheMut       sync.RWMutex
	projectInsertCache          = make(map[string]insertCache)
	projectUpdateCacheMut       sync.RWMutex
	projectUpdateCache          = make(map[string]updateCache)
	projectUpsertCacheMut       sync.RWMutex
	projectUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var projectBeforeInsertHooks []ProjectHook
var projectBeforeUpdateHooks []ProjectHook
var projectBeforeDeleteHooks []ProjectHook
var projectBeforeUpsertHooks []ProjectHook

var projectAfterInsertHooks []ProjectHook
var projectAfterSelectHooks []ProjectHook
var projectAfterUpdateHooks []ProjectHook
var projectAfterDeleteHooks []ProjectHook
var projectAfterUpsertHooks []ProjectHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Project) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range projectBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Project) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range projectBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Project) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range projectBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Project) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range projectBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Project) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range projectAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Project) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range projectAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Project) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range projectAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Project) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range projectAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Project) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range projectAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProjectHook registers your hook function for all future operations.
func AddProjectHook(hookPoint boil.HookPoint, projectHook ProjectHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		projectBeforeInsertHooks = append(projectBeforeInsertHooks, projectHook)
	case boil.BeforeUpdateHook:
		projectBeforeUpdateHooks = append(projectBeforeUpdateHooks, projectHook)
	case boil.BeforeDeleteHook:
		projectBeforeDeleteHooks = append(projectBeforeDeleteHooks, projectHook)
	case boil.BeforeUpsertHook:
		projectBeforeUpsertHooks = append(projectBeforeUpsertHooks, projectHook)
	case boil.AfterInsertHook:
		projectAfterInsertHooks = append(projectAfterInsertHooks, projectHook)
	case boil.AfterSelectHook:
		projectAfterSelectHooks = append(projectAfterSelectHooks, projectHook)
	case boil.AfterUpdateHook:
		projectAfterUpdateHooks = append(projectAfterUpdateHooks, projectHook)
	case boil.AfterDeleteHook:
		projectAfterDeleteHooks = append(projectAfterDeleteHooks, projectHook)
	case boil.AfterUpsertHook:
		projectAfterUpsertHooks = append(projectAfterUpsertHooks, projectHook)
	}
}

// One returns a single project record from the query.
func (q projectQuery) One(exec boil.Executor) (*Project, error) {
	o := &Project{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for project")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Project records from the query.
func (q projectQuery) All(exec boil.Executor) (ProjectSlice, error) {
	var o []*Project

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Project slice")
	}

	if len(projectAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Project records in the query.
func (q projectQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count project rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q projectQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if project exists")
	}

	return count > 0, nil
}

// Cover pointed to by the foreign key.
func (o *Project) Cover(mods ...qm.QueryMod) coverQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CoverID),
	}

	queryMods = append(queryMods, mods...)

	query := Covers(queryMods...)
	queries.SetFrom(query.Query, "\"cover\"")

	return query
}

// Statistic pointed to by the foreign key.
func (o *Project) Statistic(mods ...qm.QueryMod) statisticQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"project_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := Statistics(queryMods...)
	queries.SetFrom(query.Query, "\"statistics\"")

	return query
}

// Chapters retrieves all the chapter's Chapters with an executor.
func (o *Project) Chapters(mods ...qm.QueryMod) chapterQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chapter\".\"project_id\"=?", o.ID),
	)

	query := Chapters(queryMods...)
	queries.SetFrom(query.Query, "\"chapter\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"chapter\".*"})
	}

	return query
}

// Covers retrieves all the cover's Covers with an executor.
func (o *Project) Covers(mods ...qm.QueryMod) coverQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cover\".\"project_id\"=?", o.ID),
	)

	query := Covers(queryMods...)
	queries.SetFrom(query.Query, "\"cover\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"cover\".*"})
	}

	return query
}

// Artists retrieves all the author's Authors with an executor via id column.
func (o *Project) Artists(mods ...qm.QueryMod) authorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"project_artists\" on \"author\".\"id\" = \"project_artists\".\"artist_id\""),
		qm.Where("\"project_artists\".\"project_id\"=?", o.ID),
	)

	query := Authors(queryMods...)
	queries.SetFrom(query.Query, "\"author\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"author\".*"})
	}

	return query
}

// Authors retrieves all the author's Authors with an executor.
func (o *Project) Authors(mods ...qm.QueryMod) authorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"project_authors\" on \"author\".\"id\" = \"project_authors\".\"author_id\""),
		qm.Where("\"project_authors\".\"project_id\"=?", o.ID),
	)

	query := Authors(queryMods...)
	queries.SetFrom(query.Query, "\"author\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"author\".*"})
	}

	return query
}

// Tags retrieves all the tag's Tags with an executor.
func (o *Project) Tags(mods ...qm.QueryMod) tagQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"project_tags\" on \"tag\".\"id\" = \"project_tags\".\"tag_id\""),
		qm.Where("\"project_tags\".\"project_id\"=?", o.ID),
	)

	query := Tags(queryMods...)
	queries.SetFrom(query.Query, "\"tag\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"tag\".*"})
	}

	return query
}

// LoadCover allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (projectL) LoadCover(e boil.Executor, singular bool, maybeProject interface{}, mods queries.Applicator) error {
	var slice []*Project
	var object *Project

	if singular {
		object = maybeProject.(*Project)
	} else {
		slice = *maybeProject.(*[]*Project)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &projectR{}
		}
		if !queries.IsNil(object.CoverID) {
			args = append(args, object.CoverID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &projectR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CoverID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CoverID) {
				args = append(args, obj.CoverID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cover`),
		qm.WhereIn(`cover.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Cover")
	}

	var resultSlice []*Cover
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Cover")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cover")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cover")
	}

	if len(projectAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Cover = foreign
		if foreign.R == nil {
			foreign.R = &coverR{}
		}
		foreign.R.Projects = append(foreign.R.Projects, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CoverID, foreign.ID) {
				local.R.Cover = foreign
				if foreign.R == nil {
					foreign.R = &coverR{}
				}
				foreign.R.Projects = append(foreign.R.Projects, local)
				break
			}
		}
	}

	return nil
}

// LoadStatistic allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (projectL) LoadStatistic(e boil.Executor, singular bool, maybeProject interface{}, mods queries.Applicator) error {
	var slice []*Project
	var object *Project

	if singular {
		object = maybeProject.(*Project)
	} else {
		slice = *maybeProject.(*[]*Project)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &projectR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &projectR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`statistics`),
		qm.WhereIn(`statistics.project_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Statistic")
	}

	var resultSlice []*Statistic
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Statistic")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for statistics")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for statistics")
	}

	if len(projectAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Statistic = foreign
		if foreign.R == nil {
			foreign.R = &statisticR{}
		}
		foreign.R.Project = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.ProjectID) {
				local.R.Statistic = foreign
				if foreign.R == nil {
					foreign.R = &statisticR{}
				}
				foreign.R.Project = local
				break
			}
		}
	}

	return nil
}

// LoadChapters allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (projectL) LoadChapters(e boil.Executor, singular bool, maybeProject interface{}, mods queries.Applicator) error {
	var slice []*Project
	var object *Project

	if singular {
		object = maybeProject.(*Project)
	} else {
		slice = *maybeProject.(*[]*Project)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &projectR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &projectR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chapter`),
		qm.WhereIn(`chapter.project_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chapter")
	}

	var resultSlice []*Chapter
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chapter")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chapter")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chapter")
	}

	if len(chapterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Chapters = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chapterR{}
			}
			foreign.R.Project = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProjectID {
				local.R.Chapters = append(local.R.Chapters, foreign)
				if foreign.R == nil {
					foreign.R = &chapterR{}
				}
				foreign.R.Project = local
				break
			}
		}
	}

	return nil
}

// LoadCovers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (projectL) LoadCovers(e boil.Executor, singular bool, maybeProject interface{}, mods queries.Applicator) error {
	var slice []*Project
	var object *Project

	if singular {
		object = maybeProject.(*Project)
	} else {
		slice = *maybeProject.(*[]*Project)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &projectR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &projectR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cover`),
		qm.WhereIn(`cover.project_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cover")
	}

	var resultSlice []*Cover
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cover")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cover")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cover")
	}

	if len(coverAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Covers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &coverR{}
			}
			foreign.R.Project = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProjectID {
				local.R.Covers = append(local.R.Covers, foreign)
				if foreign.R == nil {
					foreign.R = &coverR{}
				}
				foreign.R.Project = local
				break
			}
		}
	}

	return nil
}

// LoadArtists allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (projectL) LoadArtists(e boil.Executor, singular bool, maybeProject interface{}, mods queries.Applicator) error {
	var slice []*Project
	var object *Project

	if singular {
		object = maybeProject.(*Project)
	} else {
		slice = *maybeProject.(*[]*Project)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &projectR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &projectR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"author\".id, \"author\".slug, \"author\".name, \"a\".\"project_id\""),
		qm.From("\"author\""),
		qm.InnerJoin("\"project_artists\" as \"a\" on \"author\".\"id\" = \"a\".\"artist_id\""),
		qm.WhereIn("\"a\".\"project_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load author")
	}

	var resultSlice []*Author

	var localJoinCols []int64
	for results.Next() {
		one := new(Author)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.Slug, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for author")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice author")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on author")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for author")
	}

	if len(authorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Artists = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &authorR{}
			}
			foreign.R.ArtistProjects = append(foreign.R.ArtistProjects, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Artists = append(local.R.Artists, foreign)
				if foreign.R == nil {
					foreign.R = &authorR{}
				}
				foreign.R.ArtistProjects = append(foreign.R.ArtistProjects, local)
				break
			}
		}
	}

	return nil
}

// LoadAuthors allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (projectL) LoadAuthors(e boil.Executor, singular bool, maybeProject interface{}, mods queries.Applicator) error {
	var slice []*Project
	var object *Project

	if singular {
		object = maybeProject.(*Project)
	} else {
		slice = *maybeProject.(*[]*Project)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &projectR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &projectR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"author\".id, \"author\".slug, \"author\".name, \"a\".\"project_id\""),
		qm.From("\"author\""),
		qm.InnerJoin("\"project_authors\" as \"a\" on \"author\".\"id\" = \"a\".\"author_id\""),
		qm.WhereIn("\"a\".\"project_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load author")
	}

	var resultSlice []*Author

	var localJoinCols []int64
	for results.Next() {
		one := new(Author)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.Slug, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for author")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice author")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on author")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for author")
	}

	if len(authorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Authors = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &authorR{}
			}
			foreign.R.AuthorProjects = append(foreign.R.AuthorProjects, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Authors = append(local.R.Authors, foreign)
				if foreign.R == nil {
					foreign.R = &authorR{}
				}
				foreign.R.AuthorProjects = append(foreign.R.AuthorProjects, local)
				break
			}
		}
	}

	return nil
}

// LoadTags allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (projectL) LoadTags(e boil.Executor, singular bool, maybeProject interface{}, mods queries.Applicator) error {
	var slice []*Project
	var object *Project

	if singular {
		object = maybeProject.(*Project)
	} else {
		slice = *maybeProject.(*[]*Project)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &projectR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &projectR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"tag\".id, \"tag\".slug, \"tag\".name, \"a\".\"project_id\""),
		qm.From("\"tag\""),
		qm.InnerJoin("\"project_tags\" as \"a\" on \"tag\".\"id\" = \"a\".\"tag_id\""),
		qm.WhereIn("\"a\".\"project_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tag")
	}

	var resultSlice []*Tag

	var localJoinCols []int64
	for results.Next() {
		one := new(Tag)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.Slug, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for tag")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice tag")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tag")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tag")
	}

	if len(tagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Tags = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tagR{}
			}
			foreign.R.Projects = append(foreign.R.Projects, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Tags = append(local.R.Tags, foreign)
				if foreign.R == nil {
					foreign.R = &tagR{}
				}
				foreign.R.Projects = append(foreign.R.Projects, local)
				break
			}
		}
	}

	return nil
}

// SetCover of the project to the related item.
// Sets o.R.Cover to related.
// Adds o to related.R.Projects.
func (o *Project) SetCover(exec boil.Executor, insert bool, related *Cover) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"project\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"cover_id"}),
		strmangle.WhereClause("\"", "\"", 2, projectPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CoverID, related.ID)
	if o.R == nil {
		o.R = &projectR{
			Cover: related,
		}
	} else {
		o.R.Cover = related
	}

	if related.R == nil {
		related.R = &coverR{
			Projects: ProjectSlice{o},
		}
	} else {
		related.R.Projects = append(related.R.Projects, o)
	}

	return nil
}

// RemoveCover relationship.
// Sets o.R.Cover to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Project) RemoveCover(exec boil.Executor, related *Cover) error {
	var err error

	queries.SetScanner(&o.CoverID, nil)
	if err = o.Update(exec, boil.Whitelist("cover_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Cover = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Projects {
		if queries.Equal(o.CoverID, ri.CoverID) {
			continue
		}

		ln := len(related.R.Projects)
		if ln > 1 && i < ln-1 {
			related.R.Projects[i] = related.R.Projects[ln-1]
		}
		related.R.Projects = related.R.Projects[:ln-1]
		break
	}
	return nil
}

// SetStatistic of the project to the related item.
// Sets o.R.Statistic to related.
// Adds o to related.R.Project.
func (o *Project) SetStatistic(exec boil.Executor, insert bool, related *Statistic) error {
	var err error

	if insert {
		queries.Assign(&related.ProjectID, o.ID)

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"statistics\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"project_id"}),
			strmangle.WhereClause("\"", "\"", 2, statisticPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.ProjectID, o.ID)
	}

	if o.R == nil {
		o.R = &projectR{
			Statistic: related,
		}
	} else {
		o.R.Statistic = related
	}

	if related.R == nil {
		related.R = &statisticR{
			Project: o,
		}
	} else {
		related.R.Project = o
	}
	return nil
}

// RemoveStatistic relationship.
// Sets o.R.Statistic to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Project) RemoveStatistic(exec boil.Executor, related *Statistic) error {
	var err error

	queries.SetScanner(&related.ProjectID, nil)
	if err = related.Update(exec, boil.Whitelist("project_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Statistic = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.Project = nil
	return nil
}

// AddChapters adds the given related objects to the existing relationships
// of the project, optionally inserting them as new records.
// Appends related to o.R.Chapters.
// Sets related.R.Project appropriately.
func (o *Project) AddChapters(exec boil.Executor, insert bool, related ...*Chapter) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProjectID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chapter\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"project_id"}),
				strmangle.WhereClause("\"", "\"", 2, chapterPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProjectID = o.ID
		}
	}

	if o.R == nil {
		o.R = &projectR{
			Chapters: related,
		}
	} else {
		o.R.Chapters = append(o.R.Chapters, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chapterR{
				Project: o,
			}
		} else {
			rel.R.Project = o
		}
	}
	return nil
}

// AddCovers adds the given related objects to the existing relationships
// of the project, optionally inserting them as new records.
// Appends related to o.R.Covers.
// Sets related.R.Project appropriately.
func (o *Project) AddCovers(exec boil.Executor, insert bool, related ...*Cover) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProjectID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cover\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"project_id"}),
				strmangle.WhereClause("\"", "\"", 2, coverPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProjectID = o.ID
		}
	}

	if o.R == nil {
		o.R = &projectR{
			Covers: related,
		}
	} else {
		o.R.Covers = append(o.R.Covers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &coverR{
				Project: o,
			}
		} else {
			rel.R.Project = o
		}
	}
	return nil
}

// AddArtists adds the given related objects to the existing relationships
// of the project, optionally inserting them as new records.
// Appends related to o.R.Artists.
// Sets related.R.ArtistProjects appropriately.
func (o *Project) AddArtists(exec boil.Executor, insert bool, related ...*Author) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"project_artists\" (\"project_id\", \"artist_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &projectR{
			Artists: related,
		}
	} else {
		o.R.Artists = append(o.R.Artists, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authorR{
				ArtistProjects: ProjectSlice{o},
			}
		} else {
			rel.R.ArtistProjects = append(rel.R.ArtistProjects, o)
		}
	}
	return nil
}

// SetArtists removes all previously related items of the
// project replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ArtistProjects's Artists accordingly.
// Replaces o.R.Artists with related.
// Sets related.R.ArtistProjects's Artists accordingly.
func (o *Project) SetArtists(exec boil.Executor, insert bool, related ...*Author) error {
	query := "delete from \"project_artists\" where \"project_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeArtistsFromArtistProjectsSlice(o, related)
	if o.R != nil {
		o.R.Artists = nil
	}
	return o.AddArtists(exec, insert, related...)
}

// RemoveArtists relationships from objects passed in.
// Removes related items from R.Artists (uses pointer comparison, removal does not keep order)
// Sets related.R.ArtistProjects.
func (o *Project) RemoveArtists(exec boil.Executor, related ...*Author) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"project_artists\" where \"project_id\" = $1 and \"artist_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeArtistsFromArtistProjectsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Artists {
			if rel != ri {
				continue
			}

			ln := len(o.R.Artists)
			if ln > 1 && i < ln-1 {
				o.R.Artists[i] = o.R.Artists[ln-1]
			}
			o.R.Artists = o.R.Artists[:ln-1]
			break
		}
	}

	return nil
}

func removeArtistsFromArtistProjectsSlice(o *Project, related []*Author) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.ArtistProjects {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.ArtistProjects)
			if ln > 1 && i < ln-1 {
				rel.R.ArtistProjects[i] = rel.R.ArtistProjects[ln-1]
			}
			rel.R.ArtistProjects = rel.R.ArtistProjects[:ln-1]
			break
		}
	}
}

// AddAuthors adds the given related objects to the existing relationships
// of the project, optionally inserting them as new records.
// Appends related to o.R.Authors.
// Sets related.R.AuthorProjects appropriately.
func (o *Project) AddAuthors(exec boil.Executor, insert bool, related ...*Author) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"project_authors\" (\"project_id\", \"author_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &projectR{
			Authors: related,
		}
	} else {
		o.R.Authors = append(o.R.Authors, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authorR{
				AuthorProjects: ProjectSlice{o},
			}
		} else {
			rel.R.AuthorProjects = append(rel.R.AuthorProjects, o)
		}
	}
	return nil
}

// SetAuthors removes all previously related items of the
// project replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AuthorProjects's Authors accordingly.
// Replaces o.R.Authors with related.
// Sets related.R.AuthorProjects's Authors accordingly.
func (o *Project) SetAuthors(exec boil.Executor, insert bool, related ...*Author) error {
	query := "delete from \"project_authors\" where \"project_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeAuthorsFromAuthorProjectsSlice(o, related)
	if o.R != nil {
		o.R.Authors = nil
	}
	return o.AddAuthors(exec, insert, related...)
}

// RemoveAuthors relationships from objects passed in.
// Removes related items from R.Authors (uses pointer comparison, removal does not keep order)
// Sets related.R.AuthorProjects.
func (o *Project) RemoveAuthors(exec boil.Executor, related ...*Author) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"project_authors\" where \"project_id\" = $1 and \"author_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeAuthorsFromAuthorProjectsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Authors {
			if rel != ri {
				continue
			}

			ln := len(o.R.Authors)
			if ln > 1 && i < ln-1 {
				o.R.Authors[i] = o.R.Authors[ln-1]
			}
			o.R.Authors = o.R.Authors[:ln-1]
			break
		}
	}

	return nil
}

func removeAuthorsFromAuthorProjectsSlice(o *Project, related []*Author) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.AuthorProjects {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.AuthorProjects)
			if ln > 1 && i < ln-1 {
				rel.R.AuthorProjects[i] = rel.R.AuthorProjects[ln-1]
			}
			rel.R.AuthorProjects = rel.R.AuthorProjects[:ln-1]
			break
		}
	}
}

// AddTags adds the given related objects to the existing relationships
// of the project, optionally inserting them as new records.
// Appends related to o.R.Tags.
// Sets related.R.Projects appropriately.
func (o *Project) AddTags(exec boil.Executor, insert bool, related ...*Tag) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"project_tags\" (\"project_id\", \"tag_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &projectR{
			Tags: related,
		}
	} else {
		o.R.Tags = append(o.R.Tags, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tagR{
				Projects: ProjectSlice{o},
			}
		} else {
			rel.R.Projects = append(rel.R.Projects, o)
		}
	}
	return nil
}

// SetTags removes all previously related items of the
// project replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Projects's Tags accordingly.
// Replaces o.R.Tags with related.
// Sets related.R.Projects's Tags accordingly.
func (o *Project) SetTags(exec boil.Executor, insert bool, related ...*Tag) error {
	query := "delete from \"project_tags\" where \"project_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeTagsFromProjectsSlice(o, related)
	if o.R != nil {
		o.R.Tags = nil
	}
	return o.AddTags(exec, insert, related...)
}

// RemoveTags relationships from objects passed in.
// Removes related items from R.Tags (uses pointer comparison, removal does not keep order)
// Sets related.R.Projects.
func (o *Project) RemoveTags(exec boil.Executor, related ...*Tag) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"project_tags\" where \"project_id\" = $1 and \"tag_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeTagsFromProjectsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Tags {
			if rel != ri {
				continue
			}

			ln := len(o.R.Tags)
			if ln > 1 && i < ln-1 {
				o.R.Tags[i] = o.R.Tags[ln-1]
			}
			o.R.Tags = o.R.Tags[:ln-1]
			break
		}
	}

	return nil
}

func removeTagsFromProjectsSlice(o *Project, related []*Tag) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Projects {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Projects)
			if ln > 1 && i < ln-1 {
				rel.R.Projects[i] = rel.R.Projects[ln-1]
			}
			rel.R.Projects = rel.R.Projects[:ln-1]
			break
		}
	}
}

// Projects retrieves all the records using an executor.
func Projects(mods ...qm.QueryMod) projectQuery {
	mods = append(mods, qm.From("\"project\""))
	return projectQuery{NewQuery(mods...)}
}

// FindProject retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProject(exec boil.Executor, iD int64, selectCols ...string) (*Project, error) {
	projectObj := &Project{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"project\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, projectObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from project")
	}

	if err = projectObj.doAfterSelectHooks(exec); err != nil {
		return projectObj, err
	}

	return projectObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Project) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no project provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(projectColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	projectInsertCacheMut.RLock()
	cache, cached := projectInsertCache[key]
	projectInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			projectAllColumns,
			projectColumnsWithDefault,
			projectColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(projectType, projectMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(projectType, projectMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"project\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"project\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into project")
	}

	if !cached {
		projectInsertCacheMut.Lock()
		projectInsertCache[key] = cache
		projectInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Project.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Project) Update(exec boil.Executor, columns boil.Columns) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(columns, nil)
	projectUpdateCacheMut.RLock()
	cache, cached := projectUpdateCache[key]
	projectUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			projectAllColumns,
			projectPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update project, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"project\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, projectPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(projectType, projectMapping, append(wl, projectPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update project row")
	}

	if !cached {
		projectUpdateCacheMut.Lock()
		projectUpdateCache[key] = cache
		projectUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q projectQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for project")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProjectSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), projectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"project\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, projectPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in project slice")
	}

	return nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Project) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no project provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(projectColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	projectUpsertCacheMut.RLock()
	cache, cached := projectUpsertCache[key]
	projectUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			projectAllColumns,
			projectColumnsWithDefault,
			projectColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			projectAllColumns,
			projectPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert project, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(projectPrimaryKeyColumns))
			copy(conflict, projectPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"project\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(projectType, projectMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(projectType, projectMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert project")
	}

	if !cached {
		projectUpsertCacheMut.Lock()
		projectUpsertCache[key] = cache
		projectUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Project record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Project) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Project provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), projectPrimaryKeyMapping)
	sql := "DELETE FROM \"project\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from project")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q projectQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("models: no projectQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from project")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProjectSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	if len(projectBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), projectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"project\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, projectPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from project slice")
	}

	if len(projectAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Project) Reload(exec boil.Executor) error {
	ret, err := FindProject(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProjectSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProjectSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), projectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"project\".* FROM \"project\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, projectPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProjectSlice")
	}

	*o = slice

	return nil
}

// ProjectExists checks if the Project row exists.
func ProjectExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"project\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if project exists")
	}

	return exists, nil
}
