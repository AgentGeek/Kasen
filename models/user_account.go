// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// User is an object representing the database table.
type User struct {
	ID          int64             `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt   time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt   null.Time         `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Name        string            `boil:"name" json:"name" toml:"name" yaml:"name"`
	Email       string            `boil:"email" json:"email" toml:"email" yaml:"email"`
	Password    string            `boil:"password" json:"password" toml:"password" yaml:"password"`
	Permissions types.StringArray `boil:"permissions" json:"permissions" toml:"permissions" yaml:"permissions"`

	R *userAccountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userAccountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserColumns = struct {
	ID          string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
	Name        string
	Email       string
	Password    string
	Permissions string
}{
	ID:          "id",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
	Name:        "name",
	Email:       "email",
	Password:    "password",
	Permissions: "permissions",
}

var UserTableColumns = struct {
	ID          string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
	Name        string
	Email       string
	Password    string
	Permissions string
}{
	ID:          "user_account.id",
	CreatedAt:   "user_account.created_at",
	UpdatedAt:   "user_account.updated_at",
	DeletedAt:   "user_account.deleted_at",
	Name:        "user_account.name",
	Email:       "user_account.email",
	Password:    "user_account.password",
	Permissions: "user_account.permissions",
}

// Generated where

var UserWhere = struct {
	ID          whereHelperint64
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	DeletedAt   whereHelpernull_Time
	Name        whereHelperstring
	Email       whereHelperstring
	Password    whereHelperstring
	Permissions whereHelpertypes_StringArray
}{
	ID:          whereHelperint64{field: "\"user_account\".\"id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"user_account\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"user_account\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"user_account\".\"deleted_at\""},
	Name:        whereHelperstring{field: "\"user_account\".\"name\""},
	Email:       whereHelperstring{field: "\"user_account\".\"email\""},
	Password:    whereHelperstring{field: "\"user_account\".\"password\""},
	Permissions: whereHelpertypes_StringArray{field: "\"user_account\".\"permissions\""},
}

// UserRels is where relationship names are stored.
var UserRels = struct {
	Chapters string
}{
	Chapters: "Chapters",
}

// userAccountR is where relationships are stored.
type userAccountR struct {
	Chapters ChapterSlice `boil:"Chapters" json:"Chapters" toml:"Chapters" yaml:"Chapters"`
}

// NewStruct creates a new relationship struct
func (*userAccountR) NewStruct() *userAccountR {
	return &userAccountR{}
}

// userAccountL is where Load methods for each relationship are stored.
type userAccountL struct{}

var (
	userAccountAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "name", "email", "password", "permissions"}
	userAccountColumnsWithoutDefault = []string{"deleted_at", "password"}
	userAccountColumnsWithDefault    = []string{"id", "created_at", "updated_at", "name", "email", "permissions"}
	userAccountPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserSlice is an alias for a slice of pointers to User.
	// This should almost always be used instead of []User.
	UserSlice []*User
	// UserHook is the signature for custom User hook methods
	UserHook func(boil.Executor, *User) error

	userAccountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userAccountType                 = reflect.TypeOf(&User{})
	userAccountMapping              = queries.MakeStructMapping(userAccountType)
	userAccountPrimaryKeyMapping, _ = queries.BindMapping(userAccountType, userAccountMapping, userAccountPrimaryKeyColumns)
	userAccountInsertCacheMut       sync.RWMutex
	userAccountInsertCache          = make(map[string]insertCache)
	userAccountUpdateCacheMut       sync.RWMutex
	userAccountUpdateCache          = make(map[string]updateCache)
	userAccountUpsertCacheMut       sync.RWMutex
	userAccountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userAccountBeforeInsertHooks []UserHook
var userAccountBeforeUpdateHooks []UserHook
var userAccountBeforeDeleteHooks []UserHook
var userAccountBeforeUpsertHooks []UserHook

var userAccountAfterInsertHooks []UserHook
var userAccountAfterSelectHooks []UserHook
var userAccountAfterUpdateHooks []UserHook
var userAccountAfterDeleteHooks []UserHook
var userAccountAfterUpsertHooks []UserHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *User) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userAccountBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *User) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userAccountBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *User) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userAccountBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *User) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userAccountBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *User) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userAccountAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *User) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userAccountAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *User) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userAccountAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *User) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userAccountAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *User) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userAccountAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserHook registers your hook function for all future operations.
func AddUserHook(hookPoint boil.HookPoint, userAccountHook UserHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userAccountBeforeInsertHooks = append(userAccountBeforeInsertHooks, userAccountHook)
	case boil.BeforeUpdateHook:
		userAccountBeforeUpdateHooks = append(userAccountBeforeUpdateHooks, userAccountHook)
	case boil.BeforeDeleteHook:
		userAccountBeforeDeleteHooks = append(userAccountBeforeDeleteHooks, userAccountHook)
	case boil.BeforeUpsertHook:
		userAccountBeforeUpsertHooks = append(userAccountBeforeUpsertHooks, userAccountHook)
	case boil.AfterInsertHook:
		userAccountAfterInsertHooks = append(userAccountAfterInsertHooks, userAccountHook)
	case boil.AfterSelectHook:
		userAccountAfterSelectHooks = append(userAccountAfterSelectHooks, userAccountHook)
	case boil.AfterUpdateHook:
		userAccountAfterUpdateHooks = append(userAccountAfterUpdateHooks, userAccountHook)
	case boil.AfterDeleteHook:
		userAccountAfterDeleteHooks = append(userAccountAfterDeleteHooks, userAccountHook)
	case boil.AfterUpsertHook:
		userAccountAfterUpsertHooks = append(userAccountAfterUpsertHooks, userAccountHook)
	}
}

// One returns a single userAccount record from the query.
func (q userAccountQuery) One(exec boil.Executor) (*User, error) {
	o := &User{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_account")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all User records from the query.
func (q userAccountQuery) All(exec boil.Executor) (UserSlice, error) {
	var o []*User

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to User slice")
	}

	if len(userAccountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all User records in the query.
func (q userAccountQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_account rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userAccountQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_account exists")
	}

	return count > 0, nil
}

// Chapters retrieves all the chapter's Chapters with an executor.
func (o *User) Chapters(mods ...qm.QueryMod) chapterQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chapter\".\"uploader_id\"=?", o.ID),
	)

	query := Chapters(queryMods...)
	queries.SetFrom(query.Query, "\"chapter\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"chapter\".*"})
	}

	return query
}

// LoadChapters allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userAccountL) LoadChapters(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userAccountR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAccountR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chapter`),
		qm.WhereIn(`chapter.uploader_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chapter")
	}

	var resultSlice []*Chapter
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chapter")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chapter")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chapter")
	}

	if len(chapterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Chapters = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chapterR{}
			}
			foreign.R.Uploader = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.UploaderID) {
				local.R.Chapters = append(local.R.Chapters, foreign)
				if foreign.R == nil {
					foreign.R = &chapterR{}
				}
				foreign.R.Uploader = local
				break
			}
		}
	}

	return nil
}

// AddChapters adds the given related objects to the existing relationships
// of the user_account, optionally inserting them as new records.
// Appends related to o.R.Chapters.
// Sets related.R.Uploader appropriately.
func (o *User) AddChapters(exec boil.Executor, insert bool, related ...*Chapter) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.UploaderID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chapter\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"uploader_id"}),
				strmangle.WhereClause("\"", "\"", 2, chapterPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.UploaderID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userAccountR{
			Chapters: related,
		}
	} else {
		o.R.Chapters = append(o.R.Chapters, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chapterR{
				Uploader: o,
			}
		} else {
			rel.R.Uploader = o
		}
	}
	return nil
}

// SetChapters removes all previously related items of the
// user_account replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Uploader's Chapters accordingly.
// Replaces o.R.Chapters with related.
// Sets related.R.Uploader's Chapters accordingly.
func (o *User) SetChapters(exec boil.Executor, insert bool, related ...*Chapter) error {
	query := "update \"chapter\" set \"uploader_id\" = null where \"uploader_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Chapters {
			queries.SetScanner(&rel.UploaderID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Uploader = nil
		}

		o.R.Chapters = nil
	}
	return o.AddChapters(exec, insert, related...)
}

// RemoveChapters relationships from objects passed in.
// Removes related items from R.Chapters (uses pointer comparison, removal does not keep order)
// Sets related.R.Uploader.
func (o *User) RemoveChapters(exec boil.Executor, related ...*Chapter) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.UploaderID, nil)
		if rel.R != nil {
			rel.R.Uploader = nil
		}
		if err = rel.Update(exec, boil.Whitelist("uploader_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Chapters {
			if rel != ri {
				continue
			}

			ln := len(o.R.Chapters)
			if ln > 1 && i < ln-1 {
				o.R.Chapters[i] = o.R.Chapters[ln-1]
			}
			o.R.Chapters = o.R.Chapters[:ln-1]
			break
		}
	}

	return nil
}

// Users retrieves all the records using an executor.
func Users(mods ...qm.QueryMod) userAccountQuery {
	mods = append(mods, qm.From("\"user_account\""))
	return userAccountQuery{NewQuery(mods...)}
}

// FindUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUser(exec boil.Executor, iD int64, selectCols ...string) (*User, error) {
	userAccountObj := &User{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_account\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, userAccountObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_account")
	}

	if err = userAccountObj.doAfterSelectHooks(exec); err != nil {
		return userAccountObj, err
	}

	return userAccountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *User) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_account provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userAccountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userAccountInsertCacheMut.RLock()
	cache, cached := userAccountInsertCache[key]
	userAccountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userAccountAllColumns,
			userAccountColumnsWithDefault,
			userAccountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userAccountType, userAccountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userAccountType, userAccountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_account\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_account\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_account")
	}

	if !cached {
		userAccountInsertCacheMut.Lock()
		userAccountInsertCache[key] = cache
		userAccountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the User.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *User) Update(exec boil.Executor, columns boil.Columns) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(columns, nil)
	userAccountUpdateCacheMut.RLock()
	cache, cached := userAccountUpdateCache[key]
	userAccountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userAccountAllColumns,
			userAccountPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update user_account, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_account\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userAccountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userAccountType, userAccountMapping, append(wl, userAccountPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update user_account row")
	}

	if !cached {
		userAccountUpdateCacheMut.Lock()
		userAccountUpdateCache[key] = cache
		userAccountUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userAccountQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for user_account")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_account\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userAccountPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in userAccount slice")
	}

	return nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *User) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_account provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userAccountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userAccountUpsertCacheMut.RLock()
	cache, cached := userAccountUpsertCache[key]
	userAccountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userAccountAllColumns,
			userAccountColumnsWithDefault,
			userAccountColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userAccountAllColumns,
			userAccountPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_account, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userAccountPrimaryKeyColumns))
			copy(conflict, userAccountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_account\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userAccountType, userAccountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userAccountType, userAccountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_account")
	}

	if !cached {
		userAccountUpsertCacheMut.Lock()
		userAccountUpsertCache[key] = cache
		userAccountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single User record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *User) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no User provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userAccountPrimaryKeyMapping)
	sql := "DELETE FROM \"user_account\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from user_account")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q userAccountQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("models: no userAccountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from user_account")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	if len(userAccountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_account\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userAccountPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from userAccount slice")
	}

	if len(userAccountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *User) Reload(exec boil.Executor) error {
	ret, err := FindUser(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_account\".* FROM \"user_account\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userAccountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserSlice")
	}

	*o = slice

	return nil
}

// UserExists checks if the User row exists.
func UserExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_account\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_account exists")
	}

	return exists, nil
}
